!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(){"use strict";Polymer("livepal-ui",{created:function(){this.gifieCardTitle="Make a gifie",this.gifieProgress=0},observe:{},isInvalid:function(string){var usernameRegex=/^\S{5,20}$/;return!usernameRegex.test(string)},makeGifie:function(){var $__0=this;this.gifshot.createGIF({numWorkers:4,numFrames:30,webcamVideoElement:this.$.video,keepCameraOn:!0,cameraStream:this.cameraStream||null,gifWidth:200,gifHeight:200,progressCallback:function(step){$__0.gifieProgress=100*step},completeCallback:function(){}},function(obj){obj.error||($__0.$.gifie.src=obj.image,$__0.gifieData=obj.image,$__0.cameraStream=obj.cameraStream)})},"switch":function(event,detail,sender){this.$.main.selected=sender.dataset.target}})},{}],2:[function(require){"use strict";var $__gifshot_47_build_47_gifshot_46_min_46_js__,$__livepal_45_ui__,gifshot=($__gifshot_47_build_47_gifshot_46_min_46_js__=require("gifshot/build/gifshot.min.js"),$__gifshot_47_build_47_gifshot_46_min_46_js__&&$__gifshot_47_build_47_gifshot_46_min_46_js__.__esModule&&$__gifshot_47_build_47_gifshot_46_min_46_js__||{"default":$__gifshot_47_build_47_gifshot_46_min_46_js__}).default;$__livepal_45_ui__=require("./livepal-ui"),$__livepal_45_ui__&&$__livepal_45_ui__.__esModule&&$__livepal_45_ui__||{"default":$__livepal_45_ui__},window.addEventListener("polymer-ready",function(){var livepal=document.querySelector("livepal-ui");livepal.gifshot=gifshot})},{"./livepal-ui":1,"gifshot/build/gifshot.min.js":5}],3:[function(require,module){function noop(){}var process=module.exports={};process.nextTick=function(){var canSetImmediate="undefined"!=typeof window&&window.setImmediate,canPost="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(canSetImmediate)return function(f){return window.setImmediate(f)};if(canPost){var queue=[];return window.addEventListener("message",function(ev){var source=ev.source;if((source===window||null===source)&&"process-tick"===ev.data&&(ev.stopPropagation(),queue.length>0)){var fn=queue.shift();fn()}},!0),function(fn){queue.push(fn),window.postMessage("process-tick","*")}}return function(fn){setTimeout(fn,0)}}(),process.title="browser",process.browser=!0,process.env={},process.argv=[],process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(){throw new Error("process.chdir is not supported")}},{}],4:[function(require){(function(process,global){!function(global){"use strict";function nonEnum(value){return{configurable:!0,enumerable:!1,value:value,writable:!0}}function newUniqueString(){return"__$"+Math.floor(1e9*Math.random())+"$"+ ++counter+"$__"}function createPrivateName(){var s=newUniqueString();return privateNames[s]=!0,s}function isSymbol(symbol){return"object"==typeof symbol&&symbol instanceof SymbolValue}function typeOf(v){return isSymbol(v)?"symbol":typeof v}function Symbol(description){var value=new SymbolValue(description);if(!(this instanceof Symbol))return value;throw new TypeError("Symbol cannot be new'ed")}function SymbolValue(description){var key=newUniqueString();$defineProperty(this,symbolDataProperty,{value:this}),$defineProperty(this,symbolInternalProperty,{value:key}),$defineProperty(this,symbolDescriptionProperty,{value:description}),freeze(this),symbolValues[key]=this}function getOwnHashObject(object){var hashObject=object[hashProperty];return hashObject&&hashObject.self===object?hashObject:$isExtensible(object)?(hashObjectProperties.hash.value=hashCounter++,hashObjectProperties.self.value=object,hashPropertyDescriptor.value=$create(null,hashObjectProperties),$defineProperty(object,hashProperty,hashPropertyDescriptor),hashPropertyDescriptor.value):void 0}function freeze(object){return getOwnHashObject(object),$freeze.apply(this,arguments)}function preventExtensions(object){return getOwnHashObject(object),$preventExtensions.apply(this,arguments)}function seal(object){return getOwnHashObject(object),$seal.apply(this,arguments)}function toProperty(name){return isSymbol(name)?name[symbolInternalProperty]:name}function getOwnPropertyNames(object){for(var rv=[],names=$getOwnPropertyNames(object),i=0;i<names.length;i++){var name=names[i];symbolValues[name]||privateNames[name]||rv.push(name)}return rv}function getOwnPropertyDescriptor(object,name){return $getOwnPropertyDescriptor(object,toProperty(name))}function getOwnPropertySymbols(object){for(var rv=[],names=$getOwnPropertyNames(object),i=0;i<names.length;i++){var symbol=symbolValues[names[i]];symbol&&rv.push(symbol)}return rv}function hasOwnProperty(name){return $hasOwnProperty.call(this,toProperty(name))}function getOption(name){return global.traceur&&global.traceur.options[name]}function setProperty(object,name,value){var sym,desc;return isSymbol(name)&&(sym=name,name=name[symbolInternalProperty]),object[name]=value,sym&&(desc=$getOwnPropertyDescriptor(object,name))&&$defineProperty(object,name,{enumerable:!1}),value}function defineProperty(object,name,descriptor){return isSymbol(name)&&(descriptor.enumerable&&(descriptor=$create(descriptor,{enumerable:{value:!1}})),name=name[symbolInternalProperty]),$defineProperty(object,name,descriptor),object}function polyfillObject(Object){$defineProperty(Object,"defineProperty",{value:defineProperty}),$defineProperty(Object,"getOwnPropertyNames",{value:getOwnPropertyNames}),$defineProperty(Object,"getOwnPropertyDescriptor",{value:getOwnPropertyDescriptor}),$defineProperty(Object.prototype,"hasOwnProperty",{value:hasOwnProperty}),$defineProperty(Object,"freeze",{value:freeze}),$defineProperty(Object,"preventExtensions",{value:preventExtensions}),$defineProperty(Object,"seal",{value:seal}),Object.getOwnPropertySymbols=getOwnPropertySymbols}function exportStar(object){for(var i=1;i<arguments.length;i++)for(var names=$getOwnPropertyNames(arguments[i]),j=0;j<names.length;j++){var name=names[j];privateNames[name]||!function(mod,name){$defineProperty(object,name,{get:function(){return mod[name]},enumerable:!0})}(arguments[i],names[j])}return object}function isObject(x){return null!=x&&("object"==typeof x||"function"==typeof x)}function toObject(x){if(null==x)throw $TypeError();return $Object(x)}function checkObjectCoercible(argument){if(null==argument)throw new TypeError("Value cannot be converted to an Object");return argument}function setupGlobals(global){global.Symbol=Symbol,global.Reflect=global.Reflect||{},global.Reflect.global=global.Reflect.global||global,polyfillObject(global.Object)}if(!global.$traceurRuntime){var $Object=Object,$TypeError=TypeError,$create=$Object.create,$defineProperties=$Object.defineProperties,$defineProperty=$Object.defineProperty,$freeze=$Object.freeze,$getOwnPropertyDescriptor=$Object.getOwnPropertyDescriptor,$getOwnPropertyNames=$Object.getOwnPropertyNames,$keys=$Object.keys,$hasOwnProperty=$Object.prototype.hasOwnProperty,$preventExtensions=($Object.prototype.toString,Object.preventExtensions),$seal=Object.seal,$isExtensible=Object.isExtensible,types={"void":function(){},any:function(){},string:function(){},number:function(){},"boolean":function(){}},method=nonEnum,counter=0,symbolInternalProperty=newUniqueString(),symbolDescriptionProperty=newUniqueString(),symbolDataProperty=newUniqueString(),symbolValues=$create(null),privateNames=$create(null);$defineProperty(Symbol.prototype,"constructor",nonEnum(Symbol)),$defineProperty(Symbol.prototype,"toString",method(function(){var symbolValue=this[symbolDataProperty];if(!getOption("symbols"))return symbolValue[symbolInternalProperty];if(!symbolValue)throw TypeError("Conversion from symbol to string");var desc=symbolValue[symbolDescriptionProperty];return void 0===desc&&(desc=""),"Symbol("+desc+")"})),$defineProperty(Symbol.prototype,"valueOf",method(function(){var symbolValue=this[symbolDataProperty];if(!symbolValue)throw TypeError("Conversion from symbol to string");return getOption("symbols")?symbolValue:symbolValue[symbolInternalProperty]})),$defineProperty(SymbolValue.prototype,"constructor",nonEnum(Symbol)),$defineProperty(SymbolValue.prototype,"toString",{value:Symbol.prototype.toString,enumerable:!1}),$defineProperty(SymbolValue.prototype,"valueOf",{value:Symbol.prototype.valueOf,enumerable:!1});var hashProperty=createPrivateName(),hashPropertyDescriptor={value:void 0},hashObjectProperties={hash:{value:void 0},self:{value:void 0}},hashCounter=0;Symbol.iterator=Symbol(),freeze(SymbolValue.prototype),setupGlobals(global),global.$traceurRuntime={createPrivateName:createPrivateName,exportStar:exportStar,getOwnHashObject:getOwnHashObject,privateNames:privateNames,setProperty:setProperty,setupGlobals:setupGlobals,toObject:toObject,isObject:isObject,toProperty:toProperty,type:types,"typeof":typeOf,checkObjectCoercible:checkObjectCoercible,hasOwnProperty:function(o,p){return hasOwnProperty.call(o,p)},defineProperties:$defineProperties,defineProperty:$defineProperty,getOwnPropertyDescriptor:$getOwnPropertyDescriptor,getOwnPropertyNames:$getOwnPropertyNames,keys:$keys}}}("undefined"!=typeof global?global:this),function(){"use strict";function spread(){for(var iterResult,rv=[],j=0,i=0;i<arguments.length;i++){var valueToSpread=$traceurRuntime.checkObjectCoercible(arguments[i]);if("function"!=typeof valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)])throw new TypeError("Cannot spread non-iterable object.");for(var iter=valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)]();!(iterResult=iter.next()).done;)rv[j++]=iterResult.value}return rv}$traceurRuntime.spread=spread}(),function(){"use strict";function superDescriptor(homeObject,name){var proto=$getPrototypeOf(homeObject);do{var result=$getOwnPropertyDescriptor(proto,name);if(result)return result;proto=$getPrototypeOf(proto)}while(proto);return void 0}function superCall(self,homeObject,name,args){return superGet(self,homeObject,name).apply(self,args)}function superGet(self,homeObject,name){var descriptor=superDescriptor(homeObject,name);return descriptor?descriptor.get?descriptor.get.call(self):descriptor.value:void 0}function superSet(self,homeObject,name,value){var descriptor=superDescriptor(homeObject,name);if(descriptor&&descriptor.set)return descriptor.set.call(self,value),value;throw $TypeError("super has no setter '"+name+"'.")}function getDescriptors(object){for(var name,descriptors={},names=$getOwnPropertyNames(object),i=0;i<names.length;i++){var name=names[i];descriptors[name]=$getOwnPropertyDescriptor(object,name)}return descriptors}function createClass(ctor,object,staticObject,superClass){return $defineProperty(object,"constructor",{value:ctor,configurable:!0,enumerable:!1,writable:!0}),arguments.length>3?("function"==typeof superClass&&(ctor.__proto__=superClass),ctor.prototype=$create(getProtoParent(superClass),getDescriptors(object))):ctor.prototype=object,$defineProperty(ctor,"prototype",{configurable:!1,writable:!1}),$defineProperties(ctor,getDescriptors(staticObject))}function getProtoParent(superClass){if("function"==typeof superClass){var prototype=superClass.prototype;if($Object(prototype)===prototype||null===prototype)return superClass.prototype;throw new $TypeError("super prototype must be an Object or null")}if(null===superClass)return null;throw new $TypeError("Super expression must either be null or a function, not "+typeof superClass+".")}function defaultSuperCall(self,homeObject,args){null!==$getPrototypeOf(homeObject)&&superCall(self,homeObject,"constructor",args)}var $Object=Object,$TypeError=TypeError,$create=$Object.create,$defineProperties=$traceurRuntime.defineProperties,$defineProperty=$traceurRuntime.defineProperty,$getOwnPropertyDescriptor=$traceurRuntime.getOwnPropertyDescriptor,$getOwnPropertyNames=$traceurRuntime.getOwnPropertyNames,$getPrototypeOf=Object.getPrototypeOf;$traceurRuntime.createClass=createClass,$traceurRuntime.defaultSuperCall=defaultSuperCall,$traceurRuntime.superCall=superCall,$traceurRuntime.superGet=superGet,$traceurRuntime.superSet=superSet}(),function(){"use strict";function nonEnum(value){return{configurable:!0,enumerable:!1,value:value,writable:!0}}function getInternalError(state){return new Error("Traceur compiler bug: invalid state in state machine: "+state)}function GeneratorContext(){this.state=0,this.GState=ST_NEWBORN,this.storedException=void 0,this.finallyFallThrough=void 0,this.sent_=void 0,this.returnValue=void 0,this.tryStack_=[]}function nextOrThrow(ctx,moveNext,action,x){switch(ctx.GState){case ST_EXECUTING:throw new Error('"'+action+'" on executing generator');case ST_CLOSED:if("next"==action)return{value:void 0,done:!0};throw x;case ST_NEWBORN:if("throw"===action)throw ctx.GState=ST_CLOSED,x;if(void 0!==x)throw $TypeError("Sent value to newborn generator");case ST_SUSPENDED:ctx.GState=ST_EXECUTING,ctx.action=action,ctx.sent=x;var value=moveNext(ctx),done=value===ctx;return done&&(value=ctx.returnValue),ctx.GState=done?ST_CLOSED:ST_SUSPENDED,{value:value,done:done}}}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function createGeneratorInstance(innerFunction,functionObject,self){var moveNext=getMoveNext(innerFunction,self),ctx=new GeneratorContext,object=$create(functionObject.prototype);return object[ctxName]=ctx,object[moveNextName]=moveNext,object}function initGeneratorFunction(functionObject){return functionObject.prototype=$create(GeneratorFunctionPrototype.prototype),functionObject.__proto__=GeneratorFunctionPrototype,functionObject}function AsyncFunctionContext(){GeneratorContext.call(this),this.err=void 0;var ctx=this;ctx.result=new Promise(function(resolve,reject){ctx.resolve=resolve,ctx.reject=reject})}function asyncWrap(innerFunction,self){var moveNext=getMoveNext(innerFunction,self),ctx=new AsyncFunctionContext;return ctx.createCallback=function(newState){return function(value){ctx.state=newState,ctx.value=value,moveNext(ctx)}},ctx.errback=function(err){handleCatch(ctx,err),moveNext(ctx)},moveNext(ctx),ctx.result}function getMoveNext(innerFunction,self){return function(ctx){for(;;)try{return innerFunction.call(self,ctx)}catch(ex){handleCatch(ctx,ex)}}}function handleCatch(ctx,ex){ctx.storedException=ex;var last=ctx.tryStack_[ctx.tryStack_.length-1];return last?(ctx.state=void 0!==last.catch?last.catch:last.finally,void 0!==last.finallyFallThrough&&(ctx.finallyFallThrough=last.finallyFallThrough),void 0):(ctx.handleException(ex),void 0)}var createPrivateName=$traceurRuntime.createPrivateName,$defineProperties=$traceurRuntime.defineProperties,$defineProperty=$traceurRuntime.defineProperty,$create=Object.create,$TypeError=TypeError,ST_NEWBORN=0,ST_EXECUTING=1,ST_SUSPENDED=2,ST_CLOSED=3,END_STATE=-2,RETHROW_STATE=-3;GeneratorContext.prototype={pushTry:function(catchState,finallyState){if(null!==finallyState){for(var finallyFallThrough=null,i=this.tryStack_.length-1;i>=0;i--)if(void 0!==this.tryStack_[i].catch){finallyFallThrough=this.tryStack_[i].catch;break}null===finallyFallThrough&&(finallyFallThrough=RETHROW_STATE),this.tryStack_.push({"finally":finallyState,finallyFallThrough:finallyFallThrough})}null!==catchState&&this.tryStack_.push({"catch":catchState})},popTry:function(){this.tryStack_.pop()},get sent(){return this.maybeThrow(),this.sent_},set sent(v){this.sent_=v},get sentIgnoreThrow(){return this.sent_},maybeThrow:function(){if("throw"===this.action)throw this.action="next",this.sent_},end:function(){switch(this.state){case END_STATE:return this;case RETHROW_STATE:throw this.storedException;default:throw getInternalError(this.state)}},handleException:function(ex){throw this.GState=ST_CLOSED,this.state=END_STATE,ex}};var ctxName=createPrivateName(),moveNextName=createPrivateName();GeneratorFunction.prototype=GeneratorFunctionPrototype,$defineProperty(GeneratorFunctionPrototype,"constructor",nonEnum(GeneratorFunction)),GeneratorFunctionPrototype.prototype={constructor:GeneratorFunctionPrototype,next:function(v){return nextOrThrow(this[ctxName],this[moveNextName],"next",v)},"throw":function(v){return nextOrThrow(this[ctxName],this[moveNextName],"throw",v)}},$defineProperties(GeneratorFunctionPrototype.prototype,{constructor:{enumerable:!1},next:{enumerable:!1},"throw":{enumerable:!1}}),Object.defineProperty(GeneratorFunctionPrototype.prototype,Symbol.iterator,nonEnum(function(){return this})),AsyncFunctionContext.prototype=$create(GeneratorContext.prototype),AsyncFunctionContext.prototype.end=function(){switch(this.state){case END_STATE:this.resolve(this.returnValue);break;case RETHROW_STATE:this.reject(this.storedException);break;default:this.reject(getInternalError(this.state))}},AsyncFunctionContext.prototype.handleException=function(){this.state=RETHROW_STATE},$traceurRuntime.asyncWrap=asyncWrap,$traceurRuntime.initGeneratorFunction=initGeneratorFunction,$traceurRuntime.createGeneratorInstance=createGeneratorInstance}(),function(){function buildFromEncodedParts(opt_scheme,opt_userInfo,opt_domain,opt_port,opt_path,opt_queryData,opt_fragment){var out=[];return opt_scheme&&out.push(opt_scheme,":"),opt_domain&&(out.push("//"),opt_userInfo&&out.push(opt_userInfo,"@"),out.push(opt_domain),opt_port&&out.push(":",opt_port)),opt_path&&out.push(opt_path),opt_queryData&&out.push("?",opt_queryData),opt_fragment&&out.push("#",opt_fragment),out.join("")}function split(uri){return uri.match(splitRe)}function removeDotSegments(path){if("/"===path)return"/";for(var leadingSlash="/"===path[0]?"/":"",trailingSlash="/"===path.slice(-1)?"/":"",segments=path.split("/"),out=[],up=0,pos=0;pos<segments.length;pos++){var segment=segments[pos];switch(segment){case"":case".":break;case"..":out.length?out.pop():up++;break;default:out.push(segment)}}if(!leadingSlash){for(;up-->0;)out.unshift("..");0===out.length&&out.push(".")}return leadingSlash+out.join("/")+trailingSlash}function joinAndCanonicalizePath(parts){var path=parts[ComponentIndex.PATH]||"";return path=removeDotSegments(path),parts[ComponentIndex.PATH]=path,buildFromEncodedParts(parts[ComponentIndex.SCHEME],parts[ComponentIndex.USER_INFO],parts[ComponentIndex.DOMAIN],parts[ComponentIndex.PORT],parts[ComponentIndex.PATH],parts[ComponentIndex.QUERY_DATA],parts[ComponentIndex.FRAGMENT])}function canonicalizeUrl(url){var parts=split(url);return joinAndCanonicalizePath(parts)}function resolveUrl(base,url){var parts=split(url),baseParts=split(base);if(parts[ComponentIndex.SCHEME])return joinAndCanonicalizePath(parts);parts[ComponentIndex.SCHEME]=baseParts[ComponentIndex.SCHEME];for(var i=ComponentIndex.SCHEME;i<=ComponentIndex.PORT;i++)parts[i]||(parts[i]=baseParts[i]);if("/"==parts[ComponentIndex.PATH][0])return joinAndCanonicalizePath(parts);var path=baseParts[ComponentIndex.PATH],index=path.lastIndexOf("/");return path=path.slice(0,index+1)+parts[ComponentIndex.PATH],parts[ComponentIndex.PATH]=path,joinAndCanonicalizePath(parts)}function isAbsolute(name){if(!name)return!1;if("/"===name[0])return!0;var parts=split(name);return parts[ComponentIndex.SCHEME]?!0:!1}var splitRe=new RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$"),ComponentIndex={SCHEME:1,USER_INFO:2,DOMAIN:3,PORT:4,PATH:5,QUERY_DATA:6,FRAGMENT:7};$traceurRuntime.canonicalizeUrl=canonicalizeUrl,$traceurRuntime.isAbsolute=isAbsolute,$traceurRuntime.removeDotSegments=removeDotSegments,$traceurRuntime.resolveUrl=resolveUrl}(),function(global){"use strict";function getUncoatedModuleInstantiator(name){if(name){var url=ModuleStore.normalize(name);return moduleInstantiators[url]}}function Module(uncoatedModule){var isLive=arguments[1],coatedModule=Object.create(null);return Object.getOwnPropertyNames(uncoatedModule).forEach(function(name){var getter,value;if(isLive===liveModuleSentinel){var descr=Object.getOwnPropertyDescriptor(uncoatedModule,name);descr.get&&(getter=descr.get)}getter||(value=uncoatedModule[name],getter=function(){return value}),Object.defineProperty(coatedModule,name,{get:getter,enumerable:!0})}),Object.preventExtensions(coatedModule),coatedModule}var baseURL,$__2=$traceurRuntime,canonicalizeUrl=$__2.canonicalizeUrl,resolveUrl=$__2.resolveUrl,isAbsolute=$__2.isAbsolute,moduleInstantiators=Object.create(null);baseURL=global.location&&global.location.href?resolveUrl(global.location.href,"./"):"";var UncoatedModuleEntry=function(url,uncoatedModule){this.url=url,this.value_=uncoatedModule};$traceurRuntime.createClass(UncoatedModuleEntry,{},{});var ModuleEvaluationError=function(erroneousModuleName,cause){this.message=this.constructor.name+": "+this.stripCause(cause)+" in "+erroneousModuleName,this.stack=cause instanceof $ModuleEvaluationError||!cause.stack?"":this.stripStack(cause.stack)},$ModuleEvaluationError=ModuleEvaluationError;$traceurRuntime.createClass(ModuleEvaluationError,{stripError:function(message){return message.replace(/.*Error:/,this.constructor.name+":")},stripCause:function(cause){return cause?cause.message?this.stripError(cause.message):cause+"":""},loadedBy:function(moduleName){this.stack+="\n loaded by "+moduleName},stripStack:function(causeStack){var stack=[];return causeStack.split("\n").some(function(frame){return/UncoatedModuleInstantiator/.test(frame)?!0:(stack.push(frame),void 0)}),stack[0]=this.stripError(stack[0]),stack.join("\n")}},{},Error);var UncoatedModuleInstantiator=function(url,func){$traceurRuntime.superCall(this,$UncoatedModuleInstantiator.prototype,"constructor",[url,null]),this.func=func},$UncoatedModuleInstantiator=UncoatedModuleInstantiator;$traceurRuntime.createClass(UncoatedModuleInstantiator,{getUncoatedModule:function(){if(this.value_)return this.value_;try{return this.value_=this.func.call(global)}catch(ex){if(ex instanceof ModuleEvaluationError)throw ex.loadedBy(this.url),ex;throw new ModuleEvaluationError(this.url,ex)}}},{},UncoatedModuleEntry);var moduleInstances=Object.create(null),liveModuleSentinel={},ModuleStore={normalize:function(name,refererName){if("string"!=typeof name)throw new TypeError("module name must be a string, not "+typeof name);if(isAbsolute(name))return canonicalizeUrl(name);if(/[^\.]\/\.\.\//.test(name))throw new Error("module name embeds /../: "+name);return"."===name[0]&&refererName?resolveUrl(refererName,name):canonicalizeUrl(name)},get:function(normalizedName){var m=getUncoatedModuleInstantiator(normalizedName);if(!m)return void 0;var moduleInstance=moduleInstances[m.url];return moduleInstance?moduleInstance:(moduleInstance=Module(m.getUncoatedModule(),liveModuleSentinel),moduleInstances[m.url]=moduleInstance)},set:function(normalizedName,module){normalizedName=String(normalizedName),moduleInstantiators[normalizedName]=new UncoatedModuleInstantiator(normalizedName,function(){return module}),moduleInstances[normalizedName]=module},get baseURL(){return baseURL},set baseURL(v){baseURL=String(v)},registerModule:function(name,func){var normalizedName=ModuleStore.normalize(name);if(moduleInstantiators[normalizedName])throw new Error("duplicate module named "+normalizedName);moduleInstantiators[normalizedName]=new UncoatedModuleInstantiator(normalizedName,func)},bundleStore:Object.create(null),register:function(name,deps,func){deps&&(deps.length||func.length)?this.bundleStore[name]={deps:deps,execute:function(){var $__0=arguments,depMap={};deps.forEach(function(dep,index){return depMap[dep]=$__0[index]});var registryEntry=func.call(this,depMap);return registryEntry.execute.call(this),registryEntry.exports}}:this.registerModule(name,func)},getAnonymousModule:function(func){return new Module(func.call(global),liveModuleSentinel)},getForTesting:function(name){var $__0=this;return this.testingPrefix_||Object.keys(moduleInstances).some(function(key){var m=/(traceur@[^\/]*\/)/.exec(key);return m?($__0.testingPrefix_=m[1],!0):void 0}),this.get(this.testingPrefix_+name)}};ModuleStore.set("@traceur/src/runtime/ModuleStore",new Module({ModuleStore:ModuleStore}));var setupGlobals=$traceurRuntime.setupGlobals;$traceurRuntime.setupGlobals=function(global){setupGlobals(global)},$traceurRuntime.ModuleStore=ModuleStore,global.System={register:ModuleStore.register.bind(ModuleStore),get:ModuleStore.get,set:ModuleStore.set,normalize:ModuleStore.normalize},$traceurRuntime.getModuleImpl=function(name){var instantiator=getUncoatedModuleInstantiator(name);return instantiator&&instantiator.getUncoatedModule()}}("undefined"!=typeof global?global:this),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/utils",[],function(){"use strict";function toUint32(x){return x>>>0}function isObject(x){return x&&("object"==typeof x||"function"==typeof x)}function isCallable(x){return"function"==typeof x}function isNumber(x){return"number"==typeof x}function toInteger(x){return x=+x,$isNaN(x)?0:0!==x&&$isFinite(x)?x>0?$floor(x):$ceil(x):x}function toLength(x){var len=toInteger(x);return 0>len?0:$min(len,MAX_SAFE_LENGTH)}function checkIterable(x){return isObject(x)?x[Symbol.iterator]:void 0}function isConstructor(x){return isCallable(x)}function createIteratorResultObject(value,done){return{value:value,done:done}}function maybeDefine(object,name,descr){name in object||Object.defineProperty(object,name,descr)}function maybeDefineMethod(object,name,value){maybeDefine(object,name,{value:value,configurable:!0,enumerable:!1,writable:!0})}function maybeDefineConst(object,name,value){maybeDefine(object,name,{value:value,configurable:!1,enumerable:!1,writable:!1})}function maybeAddFunctions(object,functions){for(var i=0;i<functions.length;i+=2){var name=functions[i],value=functions[i+1];maybeDefineMethod(object,name,value)}}function maybeAddConsts(object,consts){for(var i=0;i<consts.length;i+=2){var name=consts[i],value=consts[i+1];maybeDefineConst(object,name,value)}}function maybeAddIterator(object,func,Symbol){Symbol&&Symbol.iterator&&!object[Symbol.iterator]&&(object["@@iterator"]&&(func=object["@@iterator"]),Object.defineProperty(object,Symbol.iterator,{value:func,configurable:!0,enumerable:!1,writable:!0}))}function registerPolyfill(func){polyfills.push(func)}function polyfillAll(global){polyfills.forEach(function(f){return f(global)})}var $ceil=Math.ceil,$floor=Math.floor,$isFinite=isFinite,$isNaN=isNaN,$pow=Math.pow,$min=Math.min,toObject=$traceurRuntime.toObject,MAX_SAFE_LENGTH=$pow(2,53)-1,polyfills=[];return{get toObject(){return toObject},get toUint32(){return toUint32},get isObject(){return isObject},get isCallable(){return isCallable},get isNumber(){return isNumber},get toInteger(){return toInteger},get toLength(){return toLength},get checkIterable(){return checkIterable},get isConstructor(){return isConstructor},get createIteratorResultObject(){return createIteratorResultObject},get maybeDefine(){return maybeDefine},get maybeDefineMethod(){return maybeDefineMethod},get maybeDefineConst(){return maybeDefineConst},get maybeAddFunctions(){return maybeAddFunctions},get maybeAddConsts(){return maybeAddConsts},get maybeAddIterator(){return maybeAddIterator},get registerPolyfill(){return registerPolyfill},get polyfillAll(){return polyfillAll}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Map",[],function(){"use strict";function lookupIndex(map,key){if(isObject(key)){var hashObject=getOwnHashObject(key);return hashObject&&map.objectIndex_[hashObject.hash]}return"string"==typeof key?map.stringIndex_[key]:map.primitiveIndex_[key]}function initMap(map){map.entries_=[],map.objectIndex_=Object.create(null),map.stringIndex_=Object.create(null),map.primitiveIndex_=Object.create(null),map.deletedCount_=0}function polyfillMap(global){var $__7=global,Object=$__7.Object,Symbol=$__7.Symbol;global.Map||(global.Map=Map);var mapPrototype=global.Map.prototype;mapPrototype.entries&&(maybeAddIterator(mapPrototype,mapPrototype.entries,Symbol),maybeAddIterator(Object.getPrototypeOf((new global.Map).entries()),function(){return this},Symbol))}var $__3=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),isObject=$__3.isObject,maybeAddIterator=$__3.maybeAddIterator,registerPolyfill=$__3.registerPolyfill,getOwnHashObject=$traceurRuntime.getOwnHashObject,$hasOwnProperty=Object.prototype.hasOwnProperty,deletedSentinel={},Map=function(){var iterable=arguments[0];if(!isObject(this))throw new TypeError("Map called on incompatible type");if($hasOwnProperty.call(this,"entries_"))throw new TypeError("Map can not be reentrantly initialised");if(initMap(this),null!==iterable&&void 0!==iterable)for(var $__6,$__5=iterable[Symbol.iterator]();!($__6=$__5.next()).done;){var $__7=$__6.value,key=$__7[0],value=$__7[1];this.set(key,value)}};return $traceurRuntime.createClass(Map,{get size(){return this.entries_.length/2-this.deletedCount_},get:function(key){var index=lookupIndex(this,key);return void 0!==index?this.entries_[index+1]:void 0},set:function(key,value){var objectMode=isObject(key),stringMode="string"==typeof key,index=lookupIndex(this,key);if(void 0!==index)this.entries_[index+1]=value;else if(index=this.entries_.length,this.entries_[index]=key,this.entries_[index+1]=value,objectMode){var hashObject=getOwnHashObject(key),hash=hashObject.hash;this.objectIndex_[hash]=index}else stringMode?this.stringIndex_[key]=index:this.primitiveIndex_[key]=index;return this},has:function(key){return void 0!==lookupIndex(this,key)},"delete":function(key){var index,hash,objectMode=isObject(key),stringMode="string"==typeof key;if(objectMode){var hashObject=getOwnHashObject(key);hashObject&&(index=this.objectIndex_[hash=hashObject.hash],delete this.objectIndex_[hash])}else stringMode?(index=this.stringIndex_[key],delete this.stringIndex_[key]):(index=this.primitiveIndex_[key],delete this.primitiveIndex_[key]);return void 0!==index?(this.entries_[index]=deletedSentinel,this.entries_[index+1]=void 0,this.deletedCount_++,!0):!1},clear:function(){initMap(this)},forEach:function(callbackFn){for(var thisArg=arguments[1],i=0;i<this.entries_.length;i+=2){var key=this.entries_[i],value=this.entries_[i+1];key!==deletedSentinel&&callbackFn.call(thisArg,value,key,this)}},entries:$traceurRuntime.initGeneratorFunction(function $__8(){var i,key,value;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:i=0,$ctx.state=12;break;case 12:$ctx.state=i<this.entries_.length?8:-2;break;case 4:i+=2,$ctx.state=12;break;case 8:key=this.entries_[i],value=this.entries_[i+1],$ctx.state=9;break;case 9:$ctx.state=key===deletedSentinel?4:6;break;case 6:return $ctx.state=2,[key,value];case 2:$ctx.maybeThrow(),$ctx.state=4;break;default:return $ctx.end()}},$__8,this)}),keys:$traceurRuntime.initGeneratorFunction(function $__9(){var i,key,value;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:i=0,$ctx.state=12;break;case 12:$ctx.state=i<this.entries_.length?8:-2;break;case 4:i+=2,$ctx.state=12;break;case 8:key=this.entries_[i],value=this.entries_[i+1],$ctx.state=9;break;case 9:$ctx.state=key===deletedSentinel?4:6;break;case 6:return $ctx.state=2,key;case 2:$ctx.maybeThrow(),$ctx.state=4;break;default:return $ctx.end()}},$__9,this)}),values:$traceurRuntime.initGeneratorFunction(function $__10(){var i,key,value;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:i=0,$ctx.state=12;break;case 12:$ctx.state=i<this.entries_.length?8:-2;break;case 4:i+=2,$ctx.state=12;break;case 8:key=this.entries_[i],value=this.entries_[i+1],$ctx.state=9;break;case 9:$ctx.state=key===deletedSentinel?4:6;break;case 6:return $ctx.state=2,value;case 2:$ctx.maybeThrow(),$ctx.state=4;break;default:return $ctx.end()}},$__10,this)
})},{}),Object.defineProperty(Map.prototype,Symbol.iterator,{configurable:!0,writable:!0,value:Map.prototype.entries}),registerPolyfill(polyfillMap),{get Map(){return Map},get polyfillMap(){return polyfillMap}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Map"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Set",[],function(){"use strict";function initSet(set){set.map_=new Map}function polyfillSet(global){var $__17=global,Object=$__17.Object,Symbol=$__17.Symbol;global.Set||(global.Set=Set);var setPrototype=global.Set.prototype;setPrototype.values&&(maybeAddIterator(setPrototype,setPrototype.values,Symbol),maybeAddIterator(Object.getPrototypeOf((new global.Set).values()),function(){return this},Symbol))}var $__11=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),isObject=$__11.isObject,maybeAddIterator=$__11.maybeAddIterator,registerPolyfill=$__11.registerPolyfill,Map=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Map").Map,$hasOwnProperty=($traceurRuntime.getOwnHashObject,Object.prototype.hasOwnProperty),Set=function(){var iterable=arguments[0];if(!isObject(this))throw new TypeError("Set called on incompatible type");if($hasOwnProperty.call(this,"map_"))throw new TypeError("Set can not be reentrantly initialised");if(initSet(this),null!==iterable&&void 0!==iterable)for(var $__16,$__15=iterable[Symbol.iterator]();!($__16=$__15.next()).done;){var item=$__16.value;this.add(item)}};return $traceurRuntime.createClass(Set,{get size(){return this.map_.size},has:function(key){return this.map_.has(key)},add:function(key){return this.map_.set(key,key),this},"delete":function(key){return this.map_.delete(key)},clear:function(){return this.map_.clear()},forEach:function(callbackFn){var thisArg=arguments[1],$__13=this;return this.map_.forEach(function(value,key){callbackFn.call(thisArg,key,key,$__13)})},values:$traceurRuntime.initGeneratorFunction(function $__18(){var $__19,$__20;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:$__19=this.map_.keys()[Symbol.iterator](),$ctx.sent=void 0,$ctx.action="next",$ctx.state=12;break;case 12:$__20=$__19[$ctx.action]($ctx.sentIgnoreThrow),$ctx.state=9;break;case 9:$ctx.state=$__20.done?3:2;break;case 3:$ctx.sent=$__20.value,$ctx.state=-2;break;case 2:return $ctx.state=12,$__20.value;default:return $ctx.end()}},$__18,this)}),entries:$traceurRuntime.initGeneratorFunction(function $__21(){var $__22,$__23;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:$__22=this.map_.entries()[Symbol.iterator](),$ctx.sent=void 0,$ctx.action="next",$ctx.state=12;break;case 12:$__23=$__22[$ctx.action]($ctx.sentIgnoreThrow),$ctx.state=9;break;case 9:$ctx.state=$__23.done?3:2;break;case 3:$ctx.sent=$__23.value,$ctx.state=-2;break;case 2:return $ctx.state=12,$__23.value;default:return $ctx.end()}},$__21,this)})},{}),Object.defineProperty(Set.prototype,Symbol.iterator,{configurable:!0,writable:!0,value:Set.prototype.values}),Object.defineProperty(Set.prototype,"keys",{configurable:!0,writable:!0,value:Set.prototype.values}),registerPolyfill(polyfillSet),{get Set(){return Set},get polyfillSet(){return polyfillSet}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Set"),System.register("traceur-runtime@0.0.62/node_modules/rsvp/lib/rsvp/asap",[],function(){"use strict";function asap(callback,arg){queue[len]=callback,queue[len+1]=arg,len+=2,2===len&&scheduleFlush()}function useNextTick(){return function(){process.nextTick(flush)}}function useMutationObserver(){var iterations=0,observer=new BrowserMutationObserver(flush),node=document.createTextNode("");return observer.observe(node,{characterData:!0}),function(){node.data=iterations=++iterations%2}}function useMessageChannel(){var channel=new MessageChannel;return channel.port1.onmessage=flush,function(){channel.port2.postMessage(0)}}function useSetTimeout(){return function(){setTimeout(flush,1)}}function flush(){for(var i=0;len>i;i+=2){var callback=queue[i],arg=queue[i+1];callback(arg),queue[i]=void 0,queue[i+1]=void 0}len=0}var scheduleFlush,len=0,$__default=asap,browserGlobal="undefined"!=typeof window?window:{},BrowserMutationObserver=browserGlobal.MutationObserver||browserGlobal.WebKitMutationObserver,isWorker="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,queue=new Array(1e3);return scheduleFlush="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?useNextTick():BrowserMutationObserver?useMutationObserver():isWorker?useMessageChannel():useSetTimeout(),{get default(){return $__default}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Promise",[],function(){"use strict";function isPromise(x){return x&&"object"==typeof x&&void 0!==x.status_}function idResolveHandler(x){return x}function idRejectHandler(x){throw x}function chain(promise){var onResolve=void 0!==arguments[1]?arguments[1]:idResolveHandler,onReject=void 0!==arguments[2]?arguments[2]:idRejectHandler,deferred=getDeferred(promise.constructor);switch(promise.status_){case void 0:throw TypeError;case 0:promise.onResolve_.push(onResolve,deferred),promise.onReject_.push(onReject,deferred);break;case 1:promiseEnqueue(promise.value_,[onResolve,deferred]);break;case-1:promiseEnqueue(promise.value_,[onReject,deferred])}return deferred.promise}function getDeferred(C){if(this===$Promise){var promise=promiseInit(new $Promise(promiseRaw));return{promise:promise,resolve:function(x){promiseResolve(promise,x)},reject:function(r){promiseReject(promise,r)}}}var result={};return result.promise=new C(function(resolve,reject){result.resolve=resolve,result.reject=reject}),result}function promiseSet(promise,status,value,onResolve,onReject){return promise.status_=status,promise.value_=value,promise.onResolve_=onResolve,promise.onReject_=onReject,promise}function promiseInit(promise){return promiseSet(promise,0,void 0,[],[])}function promiseResolve(promise,x){promiseDone(promise,1,x,promise.onResolve_)}function promiseReject(promise,r){promiseDone(promise,-1,r,promise.onReject_)}function promiseDone(promise,status,value,reactions){0===promise.status_&&(promiseEnqueue(value,reactions),promiseSet(promise,status,value))}function promiseEnqueue(value,tasks){async(function(){for(var i=0;i<tasks.length;i+=2)promiseHandle(value,tasks[i],tasks[i+1])})}function promiseHandle(value,handler,deferred){try{var result=handler(value);if(result===deferred.promise)throw new TypeError;isPromise(result)?chain(result,deferred.resolve,deferred.reject):deferred.resolve(result)}catch(e){try{deferred.reject(e)}catch(e){}}}function isObject(x){return x&&("object"==typeof x||"function"==typeof x)}function promiseCoerce(constructor,x){if(!isPromise(x)&&isObject(x)){var then;try{then=x.then}catch(r){var promise=$PromiseReject.call(constructor,r);return x[thenableSymbol]=promise,promise}if("function"==typeof then){var p=x[thenableSymbol];if(p)return p;var deferred=getDeferred(constructor);x[thenableSymbol]=deferred.promise;try{then.call(x,deferred.resolve,deferred.reject)}catch(r){deferred.reject(r)}return deferred.promise}}return x}function polyfillPromise(global){global.Promise||(global.Promise=Promise)}var async=System.get("traceur-runtime@0.0.62/node_modules/rsvp/lib/rsvp/asap").default,registerPolyfill=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils").registerPolyfill,promiseRaw={},Promise=function(resolver){if(resolver!==promiseRaw){if("function"!=typeof resolver)throw new TypeError;var promise=promiseInit(this);try{resolver(function(x){promiseResolve(promise,x)},function(r){promiseReject(promise,r)})}catch(e){promiseReject(promise,e)}}};$traceurRuntime.createClass(Promise,{"catch":function(onReject){return this.then(void 0,onReject)},then:function(onResolve,onReject){"function"!=typeof onResolve&&(onResolve=idResolveHandler),"function"!=typeof onReject&&(onReject=idRejectHandler);var that=this,constructor=this.constructor;return chain(this,function(x){return x=promiseCoerce(constructor,x),x===that?onReject(new TypeError):isPromise(x)?x.then(onResolve,onReject):onResolve(x)},onReject)}},{resolve:function(x){return this===$Promise?isPromise(x)?x:promiseSet(new $Promise(promiseRaw),1,x):new this(function(resolve){resolve(x)})},reject:function(r){return this===$Promise?promiseSet(new $Promise(promiseRaw),-1,r):new this(function(resolve,reject){reject(r)})},all:function(values){var deferred=getDeferred(this),resolutions=[];try{var count=values.length;if(0===count)deferred.resolve(resolutions);else for(var i=0;i<values.length;i++)this.resolve(values[i]).then(function(i,x){resolutions[i]=x,0===--count&&deferred.resolve(resolutions)}.bind(void 0,i),function(r){deferred.reject(r)})}catch(e){deferred.reject(e)}return deferred.promise},race:function(values){var deferred=getDeferred(this);try{for(var i=0;i<values.length;i++)this.resolve(values[i]).then(function(x){deferred.resolve(x)},function(r){deferred.reject(r)})}catch(e){deferred.reject(e)}return deferred.promise}});var $Promise=Promise,$PromiseReject=$Promise.reject,thenableSymbol="@@thenable";return registerPolyfill(polyfillPromise),{get Promise(){return Promise},get polyfillPromise(){return polyfillPromise}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Promise"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/StringIterator",[],function(){"use strict";function createStringIterator(string){var s=String(string),iterator=Object.create(StringIterator.prototype);return iterator[toProperty(iteratedString)]=s,iterator[toProperty(stringIteratorNextIndex)]=0,iterator}var $__29,$__27=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),createIteratorResultObject=$__27.createIteratorResultObject,isObject=$__27.isObject,$__30=$traceurRuntime,hasOwnProperty=$__30.hasOwnProperty,toProperty=$__30.toProperty,iteratedString=Symbol("iteratedString"),stringIteratorNextIndex=Symbol("stringIteratorNextIndex"),StringIterator=function(){};return $traceurRuntime.createClass(StringIterator,($__29={},Object.defineProperty($__29,"next",{value:function(){var o=this;if(!isObject(o)||!hasOwnProperty(o,iteratedString))throw new TypeError("this must be a StringIterator object");var s=o[toProperty(iteratedString)];if(void 0===s)return createIteratorResultObject(void 0,!0);var position=o[toProperty(stringIteratorNextIndex)],len=s.length;if(position>=len)return o[toProperty(iteratedString)]=void 0,createIteratorResultObject(void 0,!0);var resultString,first=s.charCodeAt(position);if(55296>first||first>56319||position+1===len)resultString=String.fromCharCode(first);else{var second=s.charCodeAt(position+1);resultString=56320>second||second>57343?String.fromCharCode(first):String.fromCharCode(first)+String.fromCharCode(second)}return o[toProperty(stringIteratorNextIndex)]=position+resultString.length,createIteratorResultObject(resultString,!1)},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty($__29,Symbol.iterator,{value:function(){return this},configurable:!0,enumerable:!0,writable:!0}),$__29),{}),{get createStringIterator(){return createStringIterator}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/String",[],function(){"use strict";function startsWith(search){var string=String(this);if(null==this||"[object RegExp]"==$toString.call(search))throw TypeError();var stringLength=string.length,searchString=String(search),position=(searchString.length,arguments.length>1?arguments[1]:void 0),pos=position?Number(position):0;isNaN(pos)&&(pos=0);var start=Math.min(Math.max(pos,0),stringLength);return $indexOf.call(string,searchString,pos)==start}function endsWith(search){var string=String(this);if(null==this||"[object RegExp]"==$toString.call(search))throw TypeError();var stringLength=string.length,searchString=String(search),searchLength=searchString.length,pos=stringLength;if(arguments.length>1){var position=arguments[1];void 0!==position&&(pos=position?Number(position):0,isNaN(pos)&&(pos=0))}var end=Math.min(Math.max(pos,0),stringLength),start=end-searchLength;return 0>start?!1:$lastIndexOf.call(string,searchString,start)==start}function contains(search){if(null==this)throw TypeError();var string=String(this),stringLength=string.length,searchString=String(search),position=(searchString.length,arguments.length>1?arguments[1]:void 0),pos=position?Number(position):0;isNaN(pos)&&(pos=0);Math.min(Math.max(pos,0),stringLength);return-1!=$indexOf.call(string,searchString,pos)}function repeat(count){if(null==this)throw TypeError();var string=String(this),n=count?Number(count):0;if(isNaN(n)&&(n=0),0>n||1/0==n)throw RangeError();if(0==n)return"";for(var result="";n--;)result+=string;return result}function codePointAt(position){if(null==this)throw TypeError();var string=String(this),size=string.length,index=position?Number(position):0;if(isNaN(index)&&(index=0),0>index||index>=size)return void 0;var second,first=string.charCodeAt(index);return first>=55296&&56319>=first&&size>index+1&&(second=string.charCodeAt(index+1),second>=56320&&57343>=second)?1024*(first-55296)+second-56320+65536:first}function raw(callsite){var raw=callsite.raw,len=raw.length>>>0;if(0===len)return"";for(var s="",i=0;;){if(s+=raw[i],i+1===len)return s;s+=arguments[++i]}}function fromCodePoint(){var highSurrogate,lowSurrogate,codeUnits=[],floor=Math.floor,index=-1,length=arguments.length;if(!length)return"";for(;++index<length;){var codePoint=Number(arguments[index]);if(!isFinite(codePoint)||0>codePoint||codePoint>1114111||floor(codePoint)!=codePoint)throw RangeError("Invalid code point: "+codePoint);65535>=codePoint?codeUnits.push(codePoint):(codePoint-=65536,highSurrogate=(codePoint>>10)+55296,lowSurrogate=codePoint%1024+56320,codeUnits.push(highSurrogate,lowSurrogate))}return String.fromCharCode.apply(null,codeUnits)}function stringPrototypeIterator(){var o=$traceurRuntime.checkObjectCoercible(this),s=String(o);return createStringIterator(s)}function polyfillString(global){var String=global.String;maybeAddFunctions(String.prototype,["codePointAt",codePointAt,"contains",contains,"endsWith",endsWith,"startsWith",startsWith,"repeat",repeat]),maybeAddFunctions(String,["fromCodePoint",fromCodePoint,"raw",raw]),maybeAddIterator(String.prototype,stringPrototypeIterator,Symbol)}var createStringIterator=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/StringIterator").createStringIterator,$__32=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),maybeAddFunctions=$__32.maybeAddFunctions,maybeAddIterator=$__32.maybeAddIterator,registerPolyfill=$__32.registerPolyfill,$toString=Object.prototype.toString,$indexOf=String.prototype.indexOf,$lastIndexOf=String.prototype.lastIndexOf;return registerPolyfill(polyfillString),{get startsWith(){return startsWith},get endsWith(){return endsWith},get contains(){return contains},get repeat(){return repeat},get codePointAt(){return codePointAt},get raw(){return raw},get fromCodePoint(){return fromCodePoint},get stringPrototypeIterator(){return stringPrototypeIterator},get polyfillString(){return polyfillString}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/String"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/ArrayIterator",[],function(){"use strict";function createArrayIterator(array,kind){var object=toObject(array),iterator=new ArrayIterator;return iterator.iteratorObject_=object,iterator.arrayIteratorNextIndex_=0,iterator.arrayIterationKind_=kind,iterator}function entries(){return createArrayIterator(this,ARRAY_ITERATOR_KIND_ENTRIES)}function keys(){return createArrayIterator(this,ARRAY_ITERATOR_KIND_KEYS)}function values(){return createArrayIterator(this,ARRAY_ITERATOR_KIND_VALUES)}var $__36,$__34=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),toObject=$__34.toObject,toUint32=$__34.toUint32,createIteratorResultObject=$__34.createIteratorResultObject,ARRAY_ITERATOR_KIND_KEYS=1,ARRAY_ITERATOR_KIND_VALUES=2,ARRAY_ITERATOR_KIND_ENTRIES=3,ArrayIterator=function(){};return $traceurRuntime.createClass(ArrayIterator,($__36={},Object.defineProperty($__36,"next",{value:function(){var iterator=toObject(this),array=iterator.iteratorObject_;if(!array)throw new TypeError("Object is not an ArrayIterator");var index=iterator.arrayIteratorNextIndex_,itemKind=iterator.arrayIterationKind_,length=toUint32(array.length);return index>=length?(iterator.arrayIteratorNextIndex_=1/0,createIteratorResultObject(void 0,!0)):(iterator.arrayIteratorNextIndex_=index+1,itemKind==ARRAY_ITERATOR_KIND_VALUES?createIteratorResultObject(array[index],!1):itemKind==ARRAY_ITERATOR_KIND_ENTRIES?createIteratorResultObject([index,array[index]],!1):createIteratorResultObject(index,!1))},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty($__36,Symbol.iterator,{value:function(){return this},configurable:!0,enumerable:!0,writable:!0}),$__36),{}),{get entries(){return entries},get keys(){return keys},get values(){return values}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Array",[],function(){"use strict";function from(arrLike){var arr,len,mapFn=arguments[1],thisArg=arguments[2],C=this,items=toObject(arrLike),mapping=void 0!==mapFn,k=0;if(mapping&&!isCallable(mapFn))throw TypeError();if(checkIterable(items)){arr=isConstructor(C)?new C:[];for(var $__40,$__39=items[Symbol.iterator]();!($__40=$__39.next()).done;){var item=$__40.value;arr[k]=mapping?mapFn.call(thisArg,item,k):item,k++}return arr.length=k,arr}for(len=toLength(items.length),arr=isConstructor(C)?new C(len):new Array(len);len>k;k++)arr[k]=mapping?"undefined"==typeof thisArg?mapFn(items[k],k):mapFn.call(thisArg,items[k],k):items[k];return arr.length=len,arr}function of(){for(var items=[],$__41=0;$__41<arguments.length;$__41++)items[$__41]=arguments[$__41];for(var C=this,len=items.length,arr=isConstructor(C)?new C(len):new Array(len),k=0;len>k;k++)arr[k]=items[k];return arr.length=len,arr}function fill(value){var start=void 0!==arguments[1]?arguments[1]:0,end=arguments[2],object=toObject(this),len=toLength(object.length),fillStart=toInteger(start),fillEnd=void 0!==end?toInteger(end):len;for(fillStart=0>fillStart?Math.max(len+fillStart,0):Math.min(fillStart,len),fillEnd=0>fillEnd?Math.max(len+fillEnd,0):Math.min(fillEnd,len);fillEnd>fillStart;)object[fillStart]=value,fillStart++;return object}function find(predicate){var thisArg=arguments[1];return findHelper(this,predicate,thisArg)}function findIndex(predicate){var thisArg=arguments[1];return findHelper(this,predicate,thisArg,!0)}function findHelper(self,predicate){var thisArg=arguments[2],returnIndex=void 0!==arguments[3]?arguments[3]:!1,object=toObject(self),len=toLength(object.length);if(!isCallable(predicate))throw TypeError();for(var i=0;len>i;i++)if(i in object){var value=object[i];if(predicate.call(thisArg,value,i,object))return returnIndex?i:value}return returnIndex?-1:void 0}function polyfillArray(global){var $__42=global,Array=$__42.Array,Object=$__42.Object,Symbol=$__42.Symbol;maybeAddFunctions(Array.prototype,["entries",entries,"keys",keys,"values",values,"fill",fill,"find",find,"findIndex",findIndex]),maybeAddFunctions(Array,["from",from,"of",of]),maybeAddIterator(Array.prototype,values,Symbol),maybeAddIterator(Object.getPrototypeOf([].values()),function(){return this},Symbol)}var $__37=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/ArrayIterator"),entries=$__37.entries,keys=$__37.keys,values=$__37.values,$__38=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),checkIterable=$__38.checkIterable,isCallable=$__38.isCallable,isConstructor=$__38.isConstructor,maybeAddFunctions=$__38.maybeAddFunctions,maybeAddIterator=$__38.maybeAddIterator,registerPolyfill=$__38.registerPolyfill,toInteger=$__38.toInteger,toLength=$__38.toLength,toObject=$__38.toObject;return registerPolyfill(polyfillArray),{get from(){return from},get of(){return of},get fill(){return fill},get find(){return find},get findIndex(){return findIndex},get polyfillArray(){return polyfillArray}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Array"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Object",[],function(){"use strict";function is(left,right){return left===right?0!==left||1/left===1/right:left!==left&&right!==right}function assign(target){for(var i=1;i<arguments.length;i++){var p,source=arguments[i],props=keys(source),length=props.length;for(p=0;length>p;p++){var name=props[p];privateNames[name]||(target[name]=source[name])}}return target}function mixin(target,source){var p,descriptor,props=getOwnPropertyNames(source),length=props.length;for(p=0;length>p;p++){var name=props[p];privateNames[name]||(descriptor=getOwnPropertyDescriptor(source,props[p]),defineProperty(target,props[p],descriptor))}return target}function polyfillObject(global){var Object=global.Object;maybeAddFunctions(Object,["assign",assign,"is",is,"mixin",mixin])}var $__43=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),maybeAddFunctions=$__43.maybeAddFunctions,registerPolyfill=$__43.registerPolyfill,$__44=$traceurRuntime,defineProperty=$__44.defineProperty,getOwnPropertyDescriptor=$__44.getOwnPropertyDescriptor,getOwnPropertyNames=$__44.getOwnPropertyNames,keys=$__44.keys,privateNames=$__44.privateNames;return registerPolyfill(polyfillObject),{get is(){return is},get assign(){return assign},get mixin(){return mixin},get polyfillObject(){return polyfillObject}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Object"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Number",[],function(){"use strict";function NumberIsFinite(number){return isNumber(number)&&$isFinite(number)}function isInteger(number){return NumberIsFinite(number)&&toInteger(number)===number}function NumberIsNaN(number){return isNumber(number)&&$isNaN(number)}function isSafeInteger(number){if(NumberIsFinite(number)){var integral=toInteger(number);if(integral===number)return $abs(integral)<=MAX_SAFE_INTEGER}return!1}function polyfillNumber(global){var Number=global.Number;maybeAddConsts(Number,["MAX_SAFE_INTEGER",MAX_SAFE_INTEGER,"MIN_SAFE_INTEGER",MIN_SAFE_INTEGER,"EPSILON",EPSILON]),maybeAddFunctions(Number,["isFinite",NumberIsFinite,"isInteger",isInteger,"isNaN",NumberIsNaN,"isSafeInteger",isSafeInteger])}var $__46=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),isNumber=$__46.isNumber,maybeAddConsts=$__46.maybeAddConsts,maybeAddFunctions=$__46.maybeAddFunctions,registerPolyfill=$__46.registerPolyfill,toInteger=$__46.toInteger,$abs=Math.abs,$isFinite=isFinite,$isNaN=isNaN,MAX_SAFE_INTEGER=Math.pow(2,53)-1,MIN_SAFE_INTEGER=-Math.pow(2,53)+1,EPSILON=Math.pow(2,-52);return registerPolyfill(polyfillNumber),{get MAX_SAFE_INTEGER(){return MAX_SAFE_INTEGER},get MIN_SAFE_INTEGER(){return MIN_SAFE_INTEGER},get EPSILON(){return EPSILON},get isFinite(){return NumberIsFinite},get isInteger(){return isInteger},get isNaN(){return NumberIsNaN},get isSafeInteger(){return isSafeInteger},get polyfillNumber(){return polyfillNumber}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Number"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/polyfills",[],function(){"use strict";var polyfillAll=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils").polyfillAll;polyfillAll(this);var setupGlobals=$traceurRuntime.setupGlobals;return $traceurRuntime.setupGlobals=function(global){setupGlobals(global),polyfillAll(global)},{}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/polyfills")}).call(this,require("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:3}],5:[function(require,module,exports){"use strict";!function(e,t,i,n){var o,a,s,d,c,l,u,m,f,h,p,v,w,y,C,S,k,x,F,E,W,U;o=function(){var r={URL:e.URL||e.webkitURL||e.mozURL||e.msURL,getUserMedia:function(){var e=i.getUserMedia||i.webkitGetUserMedia||i.mozGetUserMedia||i.msGetUserMedia;return e?e.bind(i):e}(),Blob:e.Blob||e.BlobBuilder||e.WebKitBlobBuilder||e.MozBlobBuilder||e.MSBlobBuilder,btoa:function(){var t=e.btoa||function(e){for(var t,r,i,n,o,a,s,d="",c=0,l=e.length,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";l>c;)t=e.charCodeAt(c++),r=e.charCodeAt(c++),i=e.charCodeAt(c++),n=t>>2,o=(3&t)<<4|r>>4,a=(15&r)<<2|i>>6,s=63&i,isNaN(r)?a=s=64:isNaN(i)&&(s=64),d=d+u.charAt(n)+u.charAt(o)+u.charAt(a)+u.charAt(s);return d};return t?t.bind(e):function(){}}(),isObject:function(e){return e&&"[object Object]"===Object.prototype.toString.call(e)},isEmptyObject:function(e){return r.isObject(e)&&!Object.keys(e).length},isArray:function(e){return e&&Array.isArray(e)},isFunction:function(e){return e&&"function"==typeof e},isElement:function(e){return e&&1===e.nodeType},isString:function(e){return"string"==typeof e||"[object String]"===Object.prototype.toString.call(e)},isSupported:{canvas:function(){var e=t.createElement("canvas");return e&&e.getContext&&e.getContext("2d")},webworkers:function(){return e.Worker},blob:function(){return r.Blob},Uint8Array:function(){return e.Uint8Array},Uint32Array:function(){return e.Uint32Array},videoCodecs:function(){var e=t.createElement("video"),r={mp4:!1,h264:!1,ogv:!1,ogg:!1,webm:!1};return e&&e.canPlayType&&(r.mp4=""!==e.canPlayType('video/mp4; codecs="mp4v.20.8"'),r.h264=""!==(e.canPlayType('video/mp4; codecs="avc1.42E01E"')||e.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"')),r.ogv=""!==e.canPlayType('video/ogg; codecs="theora"'),r.ogg=""!==e.canPlayType('video/ogg; codecs="theora"'),r.webm=-1!==e.canPlayType('video/webm; codecs="vp8, vorbis"')),r}()},noop:function(){},each:function(e,t){var i,n;if(r.isArray(e))for(i=-1,n=e.length;++i<n&&t(i,e[i])!==!1;);else if(r.isObject(e))for(i in e)if(e.hasOwnProperty(i)&&t(i,e[i])===!1)break},mergeOptions:function n(e,t){if(r.isObject(e)&&r.isObject(t)&&Object.keys){var i={};return r.each(e,function(t){i[t]=e[t]}),r.each(t,function(o){var a=t[o];i[o]=r.isObject(a)?e[o]?n(e[o],a):a:a}),i}},setCSSAttr:function(e,t,i){r.isElement(e)&&(r.isString(t)&&r.isString(i)?e.style[t]=i:r.isObject(t)&&r.each(t,function(t,r){e.style[t]=r}))},removeElement:function(e){r.isElement(e)&&e.parentNode&&e.parentNode.removeChild(e)},createWebWorker:function(e){if(!r.isString(e))return{};try{var t=new r.Blob([e],{type:"text/javascript"}),i=r.URL.createObjectURL(t),n=new Worker(i);return{objectUrl:i,worker:n}}catch(o){return""+o}},getExtension:function(e){return e.substr(e.lastIndexOf(".")+1,e.length)},getFontSize:function(e){if(e=e||{},!t.body||e.resizeFont===!1)return e.fontSize;var r=e.text,i=e.gifWidth,n=parseInt(e.fontSize,10),o=parseInt(e.minFontSize,10),a=t.createElement("div"),s=t.createElement("span");for(a.setAttribute("width",i),a.appendChild(s),s.innerHTML=r,s.style.fontSize=n+"px",s.style.textIndent="-9999px",s.style.visibility="hidden",t.body.appendChild(s);s.offsetWidth>i&&n>=o;)s.style.fontSize=--n+"px";return t.body.removeChild(s),n+"px"},webWorkerError:!1};return r}(),a=function(e){var t={validate:function(r){r=e.isObject(r)?r:{};var i={};return e.each(t.validators,function(e,t){var n=t.errorCode;return r[n]||t.condition?void 0:(i=t,i.error=!0,!1)}),delete i.condition,i},isValid:function(e){var r=t.validate(e),i=r.error!==!0?!0:!1;return i},validators:[{condition:e.isFunction(e.getUserMedia),errorCode:"getUserMedia",errorMsg:"The getUserMedia API is not supported in your browser"},{condition:e.isSupported.canvas(),errorCode:"canvas",errorMsg:"Canvas elements are not supported in your browser"},{condition:e.isSupported.webworkers(),errorCode:"webworkers",errorMsg:"The Web Workers API is not supported in your browser"},{condition:e.isFunction(e.URL),errorCode:"window.URL",errorMsg:"The window.URL API is not supported in your browser"},{condition:e.isSupported.blob(),errorCode:"window.Blob",errorMsg:"The window.Blob File API is not supported in your browser"},{condition:e.isSupported.Uint8Array(),errorCode:"window.Uint8Array",errorMsg:"The window.Uint8Array function constructor is not supported in your browser"},{condition:e.isSupported.Uint32Array(),errorCode:"window.Uint32Array",errorMsg:"The window.Uint32Array function constructor is not supported in your browser"}],messages:{videoCodecs:{errorCode:"videocodec",errorMsg:"The video codec you are trying to use is not supported in your browser"}}};return t}(o),s={sampleInterval:10,numWorkers:2,gifWidth:200,gifHeight:200,interval:.1,numFrames:10,keepCameraOn:!1,images:[],video:null,webcamVideoElement:null,cameraStream:null,text:"",fontWeight:"normal",fontSize:"16px",minFontSize:"10px",resizeFont:!1,fontFamily:"sans-serif",fontColor:"#ffffff",textAlign:"center",textBaseline:"bottom",textXCoordinate:null,textYCoordinate:null,progressCallback:function(){},completeCallback:function(){},saveRenderingContexts:!1,savedRenderingContexts:[]},d=function(){return a.isValid()},c=function(){return a.isValid()},l=function(){var e={getUserMedia:!0};return a.isValid(e)},u=function(e){var t=!1;if(o.isArray(e)&&e.length){if(o.each(e,function(e,r){o.isSupported.videoCodecs[r]&&(t=!0)}),!t)return!1}else if(o.isString(e)&&e.length&&!o.isSupported.videoCodecs[e])return!1;return a.isValid({getUserMedia:!0})},m=function(){function e(){function e(e,t,r){var i,n;for(u=e,m=t,f=r,h=new Array(g),i=0;g>i;i++)h[i]=new Array(4),n=h[i],n[0]=n[1]=n[2]=(i<<S+8)/g|0,D[i]=F/g|0,G[i]=0}function t(){for(var e=[],t=new Array(g),r=0;g>r;r++)t[h[r][3]]=r;for(var i=0,n=0;g>n;n++){var o=t[n];e[i++]=h[o][0],e[i++]=h[o][1],e[i++]=h[o][2]}return e}function r(){var e,t,r,i,n,o,a,s;for(a=0,s=0,e=0;g>e;e++){for(n=h[e],r=e,i=n[1],t=e+1;g>t;t++)o=h[t],o[1]<i&&(r=t,i=o[1]);if(o=h[r],e!=r&&(t=o[0],o[0]=n[0],n[0]=t,t=o[1],o[1]=n[1],n[1]=t,t=o[2],o[2]=n[2],n[2]=t,t=o[3],o[3]=n[3],n[3]=t),i!=a){for(B[a]=s+e>>1,t=a+1;i>t;t++)B[t]=e;a=i,s=e}}for(B[a]=s+C>>1,t=a+1;256>t;t++)B[t]=C}function i(){var e,t,r,i,n,o,a,h,g,C,x,F,E,W;for(y>m&&(f=1),l=30+(f-1)/3,F=u,E=0,W=m,x=m/(3*f),C=x/k|0,h=j,o=R,a=o>>I,1>=a&&(a=0),e=0;a>e;e++)N[e]=h*((a*a-e*e)*L/(a*a));for(g=y>m?3:m%p!==0?3*p:m%v!==0?3*v:m%b!==0?3*b:3*w,e=0;x>e;)if(r=(255&F[E+0])<<S,i=(255&F[E+1])<<S,n=(255&F[E+2])<<S,t=c(r,i,n),d(h,t,r,i,n),0!==a&&s(a,t,r,i,n),E+=g,E>=W&&(E-=m),e++,0===C&&(C=1),e%C===0)for(h-=h/l,o-=o/V,a=o>>I,1>=a&&(a=0),t=0;a>t;t++)N[t]=h*((a*a-t*t)*L/(a*a))}function n(e,t,r){var i,n,o,a,s,d,c;for(s=1e3,c=-1,i=B[t],n=i-1;g>i||n>=0;)g>i&&(d=h[i],o=d[1]-t,o>=s?i=g:(i++,0>o&&(o=-o),a=d[0]-e,0>a&&(a=-a),o+=a,s>o&&(a=d[2]-r,0>a&&(a=-a),o+=a,s>o&&(s=o,c=d[3])))),n>=0&&(d=h[n],o=t-d[1],o>=s?n=-1:(n--,0>o&&(o=-o),a=d[0]-e,0>a&&(a=-a),o+=a,s>o&&(a=d[2]-r,0>a&&(a=-a),o+=a,s>o&&(s=o,c=d[3]))));return c}function o(){return i(),a(),r(),t()}function a(){var e;for(e=0;g>e;e++)h[e][0]>>=S,h[e][1]>>=S,h[e][2]>>=S,h[e][3]=e}function s(e,t,r,i,n){var o,a,s,d,c,l,u;for(s=t-e,-1>s&&(s=-1),d=t+e,d>g&&(d=g),o=t+1,a=t-1,l=1;d>o||a>s;){if(c=N[l++],d>o){u=h[o++];try{u[0]-=c*(u[0]-r)/H|0,u[1]-=c*(u[1]-i)/H|0,u[2]-=c*(u[2]-n)/H|0}catch(m){}}if(a>s){u=h[a--];try{u[0]-=c*(u[0]-r)/H|0,u[1]-=c*(u[1]-i)/H|0,u[2]-=c*(u[2]-n)/H|0}catch(m){}}}}function d(e,t,r,i,n){var o=h[t],a=e/j;o[0]-=a*(o[0]-r)|0,o[1]-=a*(o[1]-i)|0,o[2]-=a*(o[2]-n)|0}function c(e,t,r){var i,n,o,a,s,d,c,l,u,m;for(l=~(1<<31),u=l,d=-1,c=d,i=0;g>i;i++)m=h[i],n=m[0]-e,0>n&&(n=-n),o=m[1]-t,0>o&&(o=-o),n+=o,o=m[2]-r,0>o&&(o=-o),n+=o,l>n&&(l=n,d=i),a=n-(G[i]>>x-S),u>a&&(u=a,c=i),s=D[i]>>W,D[i]-=s,G[i]+=s<<E;return D[d]+=U,G[d]-=A,c}var l,u,m,f,h,g=256,p=499,v=491,b=487,w=503,y=3*w,C=g-1,S=4,k=100,x=16,F=1<<x,E=10,W=10,U=F>>W,A=F<<E-W,O=g>>3,I=6,M=1<<I,R=O*M,V=30,T=10,j=1<<T,z=8,L=1<<z,P=T+z,H=1<<P,B=[],G=[],D=[],N=[];e.apply(this,arguments);var X={};return X.map=n,X.process=o,X}return e}(),f=function(e){var t=function(){try{self.onmessage=function(e){var t=e.data,r=i.run(t);t&&t.gifshot&&postMessage(r)}}catch(t){}var i={dataToRGB:function(e,t,r){for(var i=0,n=t*r*4,o=[];n>i;)o.push(e[i++]),o.push(e[i++]),o.push(e[i++]),i++;return o},componentizedPaletteToArray:function(e){var t,r,i,n,o=[];for(t=0;t<e.length;t+=3)r=e[t],i=e[t+1],n=e[t+2],o.push(r<<16|i<<8|n);
return o},processFrameWithQuantizer:function(t,i,n,o){var a,s=this.dataToRGB(t,i,n),d=new e(s,s.length,o),c=d.process(),l=new Uint32Array(this.componentizedPaletteToArray(c)),u=i*n,m=new Uint8Array(u),f=0;for(a=0;u>a;a++)r=s[f++],g=s[f++],b=s[f++],m[a]=d.map(r,g,b);return{pixels:m,palette:l}},run:function(e){var t=e.width,r=e.height,i=e.data,n=(e.palette,e.sampleInterval);return this.processFrameWithQuantizer(i,t,r,n)}};return i};return t}(m),h=function(e,t,r,i){function o(e){var t=e.length;if(2>t||t>256||t&t-1)throw"Invalid code/color length, must be power of 2 and 2 .. 256.";return t}function a(e,t,r,i){function o(r){for(;f>=r;)e[t++]=255&h,h>>=8,f-=8,t===s+256&&(e[s]=255,s=t++)}function a(e){h|=e<<f,f+=m,o(8)}e[t++]=r;var s=t++,d=1<<r,c=d-1,l=d+1,u=l+1,m=r+1,f=0,h=0,g=i[0]&c,p={};a(d);for(var v=1,b=i.length;b>v;++v){var w=i[v]&c,y=g<<8|w,C=p[y];if(C===n){for(h|=g<<f,f+=m;f>=8;)e[t++]=255&h,h>>=8,f-=8,t===s+256&&(e[s]=255,s=t++);4096===u?(a(d),u=l+1,m=r+1,p={}):(u>=1<<m&&++m,p[y]=u++),g=w}else g=C}return a(g),a(l),o(1),s+1===t?e[s]=0:(e[s]=t-s-1,e[t++]=0),t}var s=0;i=i===n?{}:i;var d=i.loop===n?null:i.loop,c=i.palette===n?null:i.palette;if(0>=t||0>=r||t>65535||r>65535)throw"Width/Height invalid.";e[s++]=71,e[s++]=73,e[s++]=70,e[s++]=56,e[s++]=57,e[s++]=97;var l=0,u=0;if(e[s++]=255&t,e[s++]=t>>8&255,e[s++]=255&r,e[s++]=r>>8&255,e[s++]=(null!==c?128:0)|l,e[s++]=u,e[s++]=0,null!==d){if(0>d||d>65535)throw"Loop count invalid.";e[s++]=33,e[s++]=255,e[s++]=11,e[s++]=78,e[s++]=69,e[s++]=84,e[s++]=83,e[s++]=67,e[s++]=65,e[s++]=80,e[s++]=69,e[s++]=50,e[s++]=46,e[s++]=48,e[s++]=3,e[s++]=1,e[s++]=255&d,e[s++]=d>>8&255,e[s++]=0}var m=!1;this.addFrame=function(t,r,i,d,l,u){if(m===!0&&(--s,m=!1),u=u===n?{}:u,0>t||0>r||t>65535||r>65535)throw"x/y invalid.";if(0>=i||0>=d||i>65535||d>65535)throw"Width/Height invalid.";if(l.length<i*d)throw"Not enough pixels for the frame size.";var f=!0,h=u.palette;if((h===n||null===h)&&(f=!1,h=c),h===n||null===h)throw"Must supply either a local or global palette.";for(var g=o(h),p=0;g>>=1;)++p;g=1<<p;var v=u.delay===n?0:u.delay,b=u.disposal===n?0:u.disposal;if(0>b||b>3)throw"Disposal out of range.";var w=!1,y=0;if(u.transparent!==n&&null!==u.transparent&&(w=!0,y=u.transparent,0>y||y>=g))throw"Transparent color index.";if((0!==b||w||0!==v)&&(e[s++]=33,e[s++]=249,e[s++]=4,e[s++]=b<<2|(w===!0?1:0),e[s++]=255&v,e[s++]=v>>8&255,e[s++]=y,e[s++]=0),e[s++]=44,e[s++]=255&t,e[s++]=t>>8&255,e[s++]=255&r,e[s++]=r>>8&255,e[s++]=255&i,e[s++]=i>>8&255,e[s++]=255&d,e[s++]=d>>8&255,e[s++]=f===!0?128|p-1:0,f===!0)for(var C=0,S=h.length;S>C;++C){var k=h[C];e[s++]=k>>16&255,e[s++]=k>>8&255,e[s++]=255&k}s=a(e,s,2>p?2:p,l)},this.end=function(){return m===!1&&(e[s++]=59,m=!0),s}},p=function(e,r,i,n){var o=function(t){t=e.isObject(t)?t:{},this.canvas=null,this.ctx=null,this.repeat=0,this.frames=[],this.numRenderedFrames=0,this.onRenderCompleteCallback=e.noop,this.onRenderProgressCallback=e.noop,this.workers=[],this.availableWorkers=[],this.generatingGIF=!1,this.options=t=e.mergeOptions(this.defaultOptions,t),this.initializeWebWorkers(t)};return o.prototype={defaultOptions:{width:160,height:120,delay:250,palette:null,sampleInterval:10,numWorkers:2},workerMethods:r(),initializeWebWorkers:function(n){var o,a,s,d,c=i.toString()+"("+r.toString()+"());",l=-1,u="";for(d=n.numWorkers;++l<d;)o=e.createWebWorker(c),e.isObject(o)?(a=o.objectUrl,s=o.worker,this.workers.push({worker:s,objectUrl:a}),this.availableWorkers.push(s)):(u=o,e.webWorkerError=!!o);this.workerError=u,this.canvas=t.createElement("canvas"),this.canvas.width=n.width,this.canvas.height=n.height,this.ctx=this.canvas.getContext("2d"),this.options.delay=.1*this.options.delay,this.frames=[]},getWorker:function(){return this.availableWorkers.pop()},freeWorker:function(e){this.availableWorkers.push(e)},byteMap:function(){for(var e=[],t=0;256>t;t++)e[t]=String.fromCharCode(t);return e}(),bufferToString:function(e){for(var t=e.length,r="",i=-1;++i<t;)r+=this.byteMap[e[i]];return r},onFrameFinished:function(){var e=this,t=this.frames,r=t.every(function(e){return!e.beingProcessed&&e.done});this.numRenderedFrames++,this.onRenderProgressCallback(.75*this.numRenderedFrames/t.length),r?this.generatingGIF||this.generateGIF(t,this.onRenderCompleteCallback):setTimeout(function(){e.processNextFrame()},1)},processFrame:function(e){var t,r,i=this,n=this.options,o=n.sampleInterval,a=this.frames,s=function(e){var n=e.data;delete t.data,t.pixels=Array.prototype.slice.call(n.pixels),t.palette=Array.prototype.slice.call(n.palette),t.done=!0,t.beingProcessed=!1,i.freeWorker(r),i.onFrameFinished()};return t=a[e],t.beingProcessed||t.done?(this.onFrameFinished(),void 0):(t.sampleInterval=o,t.beingProcessed=!0,t.gifshot=!0,r=this.getWorker(),r?(r.onmessage=s,r.postMessage(t)):s({data:i.workerMethods.run(t)}),void 0)},startRendering:function(e){this.onRenderCompleteCallback=e;for(var t=0;t<this.options.numWorkers&&t<this.frames.length;t++)this.processFrame(t)},processNextFrame:function(){for(var e=-1,t=0;t<this.frames.length;t++){var r=this.frames[t];if(!r.done&&!r.beingProcessed){e=t;break}}e>=0&&this.processFrame(e)},generateGIF:function(t,r){var i,o,a=[],s={loop:this.repeat},d=this.options,c=d.height,l=d.width,u=new n(a,l,c,s),m=this.onRenderProgressCallback,f=d.delay;this.generatingGIF=!0,e.each(t,function(e,r){var i=r.palette;m(.75+.25*r.position*1/t.length),u.addFrame(0,0,l,c,r.pixels,{palette:i,delay:f})}),u.end(),m(1),this.frames=[],this.generatingGIF=!1,e.isFunction(r)&&(i=this.bufferToString(a),o="data:image/gif;base64,"+e.btoa(i),r(o))},setRepeat:function(e){this.repeat=e},addFrame:function(t,r,i){i=e.isObject(i)?i:{};var n,o=this,a=this.ctx,s=this.options,d=s.width,c=s.height,l=(i.gifHeight,i.gifWidth,i.text),u=i.fontWeight,m=e.getFontSize(i),f=i.fontFamily,h=i.fontColor,g=i.textAlign,p=i.textBaseline,v=i.textXCoordinate?i.textXCoordinate:"left"===g?1:"right"===g?d:d/2,b=i.textYCoordinate?i.textYCoordinate:"top"===p?1:"center"===p?c/2:c,w=u+" "+m+" "+f;try{r&&(t.src=r),a.drawImage(t,0,0,d,c),l&&(a.font=w,a.fillStyle=h,a.textAlign=g,a.textBaseline=p,a.fillText(l,v,b)),n=a.getImageData(0,0,d,c),o.addFrameImageData(n)}catch(y){return""+y}},addFrameImageData:function(e){var t=this.frames,r=e.data;this.frames.push({data:r,width:e.width,height:e.height,palette:null,dithering:null,done:!1,beingProcessed:!1,position:t.length})},onRenderProgress:function(e){this.onRenderProgressCallback=e},isRendering:function(){return this.generatingGIF},getBase64GIF:function(e){var t=this,r=function(r){t.destroyWorkers(),setTimeout(function(){e(r)},0)};this.startRendering(r)},destroyWorkers:function(){if(!this.workerError){var t=this.workers;e.each(t,function(t,r){var i=r.worker,n=r.objectUrl;i.terminate(),e.URL.revokeObjectURL(n)})}}},o}(o,f,m,h),v=function(e,t){e.getBase64GIF(function(e){t({error:!1,errorCode:"",errorMsg:"",image:e})})},w=function(e){var r,i,n=e.images,s=e.imagesLength,d=e.callback,c=e.options,l={getUserMedia:!0,"window.URL":!0},u=a.validate(l),m=0;return u.error?d(u):(i=new p(c),o.each(n,function(e,n){o.isElement(n)?(n.crossOrigin="Anonymous",i.addFrame(n,n.src,c),m+=1,m===s&&v(i,d)):o.isString(n)&&(r=t.createElement("img"),r.crossOrigin="Anonymous",r.onerror=function(){s>0&&(s-=1)},r.src=n,o.setCSSAttr(r,{position:"fixed",opacity:"0"}),function(e,t,r){e.onload=function(){t.addFrame(e,r,c),o.removeElement(e),m+=1,m===s&&v(t,d)}}(r,i,n),t.body.appendChild(r))}),void 0)},y={getWebcamGIF:function(e,r){r=o.isFunction(r)?r:function(){};var i,a=t.createElement("canvas"),s=e.videoElement,d=e.keepCameraOn,c=e.webcamVideoElement,l=e.cameraStream,u=e.gifWidth,m=e.gifHeight,f=e.videoWidth,h=e.videoHeight,g=e.sampleInterval,v=e.numWorkers,b=e.crop,w=e.interval,y=e.progressCallback,C=e.savedRenderingContexts,S=e.saveRenderingContexts,k=[],x=C.length?C.length:e.numFrames,F=x,E=new p({sampleInterval:g,numWorkers:v,width:u,height:m,delay:w}),W=e.text,U=e.fontWeight,A=o.getFontSize(e),O=e.fontFamily,I=e.fontColor,M=e.textAlign,R=e.textBaseline,V=e.textXCoordinate?e.textXCoordinate:"left"===M?1:"right"===M?u:u/2,T=e.textYCoordinate?e.textYCoordinate:"top"===R?1:"center"===R?m/2:m,j=U+" "+A+" "+O,z=b?Math.floor(b.scaledWidth/2):0,L=b?f-b.scaledWidth:0,P=b?Math.floor(b.scaledHeight/2):0,H=b?h-b.scaledHeight:0,B=function(){var e=F-1;C.length?i.putImageData(C[x-F],0,0):i.drawImage(s,z,P,L,H,0,0,u,m),S&&k.push(i.getImageData(0,0,u,m)),W&&(i.font=j,i.fillStyle=I,i.textAlign=M,i.textBaseline=R,i.fillText(W,V,T)),E.addFrameImageData(i.getImageData(0,0,u,m)),F=e,y((x-F)/x),e>0&&setTimeout(B,1e3*w),F||E.getBase64GIF(function(e){r({error:!1,errorCode:"",errorMsg:"",image:e,cameraStream:l,videoElement:s,webcamVideoElement:c,savedRenderingContexts:k,keepCameraOn:d})})};x=x!==n?x:10,w=w!==n?w:.1,a.width=u,a.height=m,i=a.getContext("2d"),B()},getCropDimensions:function(e){var t=e.videoWidth,r=e.videoHeight,i=e.gifWidth,n=e.gifHeight,o={width:0,height:0,scaledWidth:0,scaledHeight:0};return t>r?(o.width=Math.round(t*(n/r))-i,o.scaledWidth=Math.round(o.width*(r/n))):(o.height=Math.round(r*(i/t))-n,o.scaledHeight=Math.round(o.height*(t/i))),o}},C={loadedData:!1,defaultVideoDimensions:{width:640,height:480},findVideoSize:function A(e){A.attempts=A.attempts||0;var t=this,r=e.videoElement,i=e.cameraStream,n=e.completedCallback;r&&(r.videoWidth>0&&r.videoHeight>0?(r.removeEventListener("loadeddata",t.findVideoSize),n({videoElement:r,cameraStream:i,videoWidth:r.videoWidth,videoHeight:r.videoHeight})):A.attempts<10?(A.attempts+=1,setTimeout(function(){t.findVideoSize(e)},200)):n({videoElement:r,cameraStream:i,videoWidth:t.defaultVideoDimensions.width,videoHeight:t.defaultVideoDimensions.height}))},onStreamingTimeout:function(e){o.isFunction(e)&&e({error:!0,errorCode:"getUserMedia",errorMsg:"There was an issue with the getUserMedia API - Timed out while trying to start streaming",image:null,cameraStream:{}})},stream:function(e){var t=this,r=o.isArray(e.existingVideo)?e.existingVideo[0]:e.existingVideo,i=e.videoElement,n=e.cameraStream,a=e.streamedCallback,s=e.completedCallback;o.isFunction(a)&&a(),r?o.isString(r)&&(i.src=r,i.innerHTML='<source src="'+r+'" type="video/'+o.getExtension(r)+'" />'):i.mozSrcObject?i.mozSrcObject=n:o.URL&&(i.src=o.URL.createObjectURL(n)),i.play(),setTimeout(function d(){d.count=d.count||0,t.loadedData===!0?(t.findVideoSize({videoElement:i,cameraStream:n,completedCallback:s}),t.loadedData=!1):(d.count+=1,d.count>10?t.findVideoSize({videoElement:i,cameraStream:n,completedCallback:s}):d())},100)},startStreaming:function(e){var r=this,i=o.isFunction(e.error)?e.error:o.noop,n=o.isFunction(e.streamed)?e.streamed:o.noop,a=o.isFunction(e.completed)?e.completed:o.noop,s=e.existingVideo,d=e.webcamVideoElement,c=o.isElement(s)?s:d?d:t.createElement("video"),l=e.lastCameraStream;c.crossOrigin="Anonymous",c.autoplay=!0,c.loop=!0,c.muted=!0,c.addEventListener("loadeddata",function(){r.loadedData=!0}),s?r.stream({videoElement:c,existingVideo:s,completedCallback:a}):l?r.stream({videoElement:c,cameraStream:l,streamedCallback:n,completedCallback:a}):o.getUserMedia({video:!0},function(e){r.stream({videoElement:c,cameraStream:e,streamedCallback:n,completedCallback:a})},i)},startVideoStreaming:function(e,t){t=t||{};var r,i=this,o=t.timeout!==n?t.timeout:0,a=t.callback,s=t.webcamVideoElement;o>0&&(r=setTimeout(function(){i.onStreamingTimeout(a)},1e4)),this.startStreaming({error:function(){a({error:!0,errorCode:"getUserMedia",errorMsg:"There was an issue with the getUserMedia API - the user probably denied permission",image:null,cameraStream:{}})},streamed:function(){clearTimeout(r)},completed:function(t){var r=t.cameraStream,i=t.videoElement,n=t.videoWidth,o=t.videoHeight;e({cameraStream:r,videoElement:i,videoWidth:n,videoHeight:o})},lastCameraStream:t.lastCameraStream,webcamVideoElement:s})},stopVideoStreaming:function(e){e=o.isObject(e)?e:{};var t=e.cameraStream,r=e.videoElement,i=e.keepCameraOn,n=e.webcamVideoElement;!i&&t&&o.isFunction(t.stop)&&t.stop(),o.isElement(r)&&!n&&(r.pause(),o.isFunction(o.URL.revokeObjectURL)&&!o.webWorkerError&&r.src&&o.URL.revokeObjectURL(r.src),o.removeElement(r))}},S=function(e){e=o.isObject(e)?e:{};var t=(o.isObject(e.options)?e.options:{},e.cameraStream),r=e.videoElement,i=e.webcamVideoElement,n=e.keepCameraOn;C.stopVideoStreaming({cameraStream:t,videoElement:r,keepCameraOn:n,webcamVideoElement:i})},k=function(e,r){var i=e.options||{},n=i.images,a=i.video,s=(i.numFrames,i.interval),d=i.video?0:1e4*s,c=e.cameraStream,l=e.videoElement,u=e.videoWidth,m=e.videoHeight,f=i.gifWidth,h=i.gifHeight,g=y.getCropDimensions({videoWidth:u,videoHeight:m,gifHeight:h,gifWidth:f}),p=r;i.crop=g,i.videoElement=l,i.videoWidth=u,i.videoHeight=m,i.cameraStream=c,o.isElement(l)&&(l.width=f+g.width,l.height=h+g.height,i.webcamVideoElement||(o.setCSSAttr(l,{position:"fixed",opacity:"0"}),t.body.appendChild(l)),l.play(),setTimeout(function(){y.getWebcamGIF(i,function(e){n&&n.length||a&&a.length||S(e),p(e)})},d))},x=function(e){var t,r,i=e.existingVideo,n=e.callback,s=e.options,d={getUserMedia:!0,"window.URL":!0},c=a.validate(d);if(c.error)return n(c);if(o.isElement(i)&&i.src){if(r=i.src,t=o.getExtension(r),!o.isSupported.videoCodecs[t])return n(a.messages.videoCodecs)}else o.isArray(i)&&o.each(i,function(e,r){return t=r.substr(r.lastIndexOf(".")+1,r.length),o.isSupported.videoCodecs[t]?(i=r,!1):void 0});C.startStreaming({completed:function(e){e.options=s||{},k(e,n)},existingVideo:i})},F=function(e){var t=e.lastCameraStream,r=e.callback,i=e.webcamVideoElement,n=e.options;return c()?n.savedRenderingContexts.length?(y.getWebcamGIF(n,function(e){r(e)}),void 0):(C.startVideoStreaming(function(e){e.options=n||{},k(e,r)},{lastCameraStream:t,callback:r,webcamVideoElement:i}),void 0):r(a.validate())},E=function(e,t){if(t=o.isFunction(e)?e:t,e=o.isObject(e)?e:{},o.isFunction(t)){var r=o.mergeOptions(s,e)||{},i=e.cameraStream,n=r.images,a=n?n.length:0,d=r.video,c=r.webcamVideoElement;a?w({images:n,imagesLength:a,callback:t,options:r}):d?x({existingVideo:d,callback:t,options:r}):F({lastCameraStream:i,callback:t,webcamVideoElement:c,options:r})}},W=function(e,t){if(t=o.isFunction(e)?e:t,e=o.isObject(e)?e:{},o.isFunction(t)){var r=o.mergeOptions(s,e),i=o.mergeOptions(r,{interval:.1,numFrames:1});E(i,t)}},U=function(e,t,r,i,n,o,a,s,d,c){var l={utils:e,error:t,defaultOptions:r,createGIF:s,takeSnapShot:d,stopVideoStreaming:c,isSupported:i,isWebCamGIFSupported:n,isExistingVideoGIFSupported:a,isExistingImagesGIFSupported:o,VERSION:"0.0.1"};return l}(o,a,s,d,c,l,u,E,W,S),function(t){"function"==typeof define&&define.amd?define([],function(){return t}):"undefined"!=typeof exports?module.exports=t:e.gifshot=t}(U)}("undefined"!=typeof window?window:{},"undefined"!=typeof document?document:{createElement:function(){}},"undefined"!=typeof window?window.navigator:{})},{}]},{},[4,2]);
//# sourceMappingURL=data:application/json;base64,