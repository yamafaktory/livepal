!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(){"use strict";Polymer("livepal-ui",{created:function(){this.devices={},this.gifieCardTitle="Make a gifie",this.gifieProgress=0},observe:{},isInvalid:function(string){var usernameRegex=/^\S{5,20}$/;return!usernameRegex.test(string)},makeGifie:function(){var $__0=this;this.gifshot.createGIF({numWorkers:4,numFrames:30,webcamVideoElement:this.$.video,keepCameraOn:!0,cameraStream:this.cameraStream||null,gifWidth:200,gifHeight:200,progressCallback:function(step){$__0.gifieProgress=100*step},completeCallback:function(){}},function(obj){obj.error||($__0.$.gifie.src=obj.image,$__0.gifieData=obj.image,$__0.cameraStream=obj.cameraStream)})},"switch":function(event,detail,sender){this.$.main.selected=sender.dataset.target},zValue:function(isMobile){return isMobile?0:1}})},{}],2:[function(require){"use strict";var $__peerjs_47_dist_47_peer_46_min_46_js__,$__gifshot_47_build_47_gifshot_46_min_46_js__,$__livepal_45_ui__,gifshot=(($__peerjs_47_dist_47_peer_46_min_46_js__=require("peerjs/dist/peer.min.js"),$__peerjs_47_dist_47_peer_46_min_46_js__&&$__peerjs_47_dist_47_peer_46_min_46_js__.__esModule&&$__peerjs_47_dist_47_peer_46_min_46_js__||{"default":$__peerjs_47_dist_47_peer_46_min_46_js__}).default,($__gifshot_47_build_47_gifshot_46_min_46_js__=require("gifshot/build/gifshot.min.js"),$__gifshot_47_build_47_gifshot_46_min_46_js__&&$__gifshot_47_build_47_gifshot_46_min_46_js__.__esModule&&$__gifshot_47_build_47_gifshot_46_min_46_js__||{"default":$__gifshot_47_build_47_gifshot_46_min_46_js__}).default);$__livepal_45_ui__=require("./livepal-ui"),$__livepal_45_ui__&&$__livepal_45_ui__.__esModule&&$__livepal_45_ui__||{"default":$__livepal_45_ui__},window.addEventListener("polymer-ready",function(){var livepal=document.querySelector("livepal-ui");livepal.gifshot=gifshot})},{"./livepal-ui":1,"gifshot/build/gifshot.min.js":5,"peerjs/dist/peer.min.js":6}],3:[function(require,module){function noop(){}var process=module.exports={};process.nextTick=function(){var canSetImmediate="undefined"!=typeof window&&window.setImmediate,canPost="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(canSetImmediate)return function(f){return window.setImmediate(f)};if(canPost){var queue=[];return window.addEventListener("message",function(ev){var source=ev.source;if((source===window||null===source)&&"process-tick"===ev.data&&(ev.stopPropagation(),queue.length>0)){var fn=queue.shift();fn()}},!0),function(fn){queue.push(fn),window.postMessage("process-tick","*")}}return function(fn){setTimeout(fn,0)}}(),process.title="browser",process.browser=!0,process.env={},process.argv=[],process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(){throw new Error("process.chdir is not supported")}},{}],4:[function(require){(function(process,global){!function(global){"use strict";function nonEnum(value){return{configurable:!0,enumerable:!1,value:value,writable:!0}}function newUniqueString(){return"__$"+Math.floor(1e9*Math.random())+"$"+ ++counter+"$__"}function createPrivateName(){var s=newUniqueString();return privateNames[s]=!0,s}function isSymbol(symbol){return"object"==typeof symbol&&symbol instanceof SymbolValue}function typeOf(v){return isSymbol(v)?"symbol":typeof v}function Symbol(description){var value=new SymbolValue(description);if(!(this instanceof Symbol))return value;throw new TypeError("Symbol cannot be new'ed")}function SymbolValue(description){var key=newUniqueString();$defineProperty(this,symbolDataProperty,{value:this}),$defineProperty(this,symbolInternalProperty,{value:key}),$defineProperty(this,symbolDescriptionProperty,{value:description}),freeze(this),symbolValues[key]=this}function getOwnHashObject(object){var hashObject=object[hashProperty];return hashObject&&hashObject.self===object?hashObject:$isExtensible(object)?(hashObjectProperties.hash.value=hashCounter++,hashObjectProperties.self.value=object,hashPropertyDescriptor.value=$create(null,hashObjectProperties),$defineProperty(object,hashProperty,hashPropertyDescriptor),hashPropertyDescriptor.value):void 0}function freeze(object){return getOwnHashObject(object),$freeze.apply(this,arguments)}function preventExtensions(object){return getOwnHashObject(object),$preventExtensions.apply(this,arguments)}function seal(object){return getOwnHashObject(object),$seal.apply(this,arguments)}function toProperty(name){return isSymbol(name)?name[symbolInternalProperty]:name}function getOwnPropertyNames(object){for(var rv=[],names=$getOwnPropertyNames(object),i=0;i<names.length;i++){var name=names[i];symbolValues[name]||privateNames[name]||rv.push(name)}return rv}function getOwnPropertyDescriptor(object,name){return $getOwnPropertyDescriptor(object,toProperty(name))}function getOwnPropertySymbols(object){for(var rv=[],names=$getOwnPropertyNames(object),i=0;i<names.length;i++){var symbol=symbolValues[names[i]];symbol&&rv.push(symbol)}return rv}function hasOwnProperty(name){return $hasOwnProperty.call(this,toProperty(name))}function getOption(name){return global.traceur&&global.traceur.options[name]}function setProperty(object,name,value){var sym,desc;return isSymbol(name)&&(sym=name,name=name[symbolInternalProperty]),object[name]=value,sym&&(desc=$getOwnPropertyDescriptor(object,name))&&$defineProperty(object,name,{enumerable:!1}),value}function defineProperty(object,name,descriptor){return isSymbol(name)&&(descriptor.enumerable&&(descriptor=$create(descriptor,{enumerable:{value:!1}})),name=name[symbolInternalProperty]),$defineProperty(object,name,descriptor),object}function polyfillObject(Object){$defineProperty(Object,"defineProperty",{value:defineProperty}),$defineProperty(Object,"getOwnPropertyNames",{value:getOwnPropertyNames}),$defineProperty(Object,"getOwnPropertyDescriptor",{value:getOwnPropertyDescriptor}),$defineProperty(Object.prototype,"hasOwnProperty",{value:hasOwnProperty}),$defineProperty(Object,"freeze",{value:freeze}),$defineProperty(Object,"preventExtensions",{value:preventExtensions}),$defineProperty(Object,"seal",{value:seal}),Object.getOwnPropertySymbols=getOwnPropertySymbols}function exportStar(object){for(var i=1;i<arguments.length;i++)for(var names=$getOwnPropertyNames(arguments[i]),j=0;j<names.length;j++){var name=names[j];privateNames[name]||!function(mod,name){$defineProperty(object,name,{get:function(){return mod[name]},enumerable:!0})}(arguments[i],names[j])}return object}function isObject(x){return null!=x&&("object"==typeof x||"function"==typeof x)}function toObject(x){if(null==x)throw $TypeError();return $Object(x)}function checkObjectCoercible(argument){if(null==argument)throw new TypeError("Value cannot be converted to an Object");return argument}function setupGlobals(global){global.Symbol=Symbol,global.Reflect=global.Reflect||{},global.Reflect.global=global.Reflect.global||global,polyfillObject(global.Object)}if(!global.$traceurRuntime){var $Object=Object,$TypeError=TypeError,$create=$Object.create,$defineProperties=$Object.defineProperties,$defineProperty=$Object.defineProperty,$freeze=$Object.freeze,$getOwnPropertyDescriptor=$Object.getOwnPropertyDescriptor,$getOwnPropertyNames=$Object.getOwnPropertyNames,$keys=$Object.keys,$hasOwnProperty=$Object.prototype.hasOwnProperty,$preventExtensions=($Object.prototype.toString,Object.preventExtensions),$seal=Object.seal,$isExtensible=Object.isExtensible,types={"void":function(){},any:function(){},string:function(){},number:function(){},"boolean":function(){}},method=nonEnum,counter=0,symbolInternalProperty=newUniqueString(),symbolDescriptionProperty=newUniqueString(),symbolDataProperty=newUniqueString(),symbolValues=$create(null),privateNames=$create(null);$defineProperty(Symbol.prototype,"constructor",nonEnum(Symbol)),$defineProperty(Symbol.prototype,"toString",method(function(){var symbolValue=this[symbolDataProperty];if(!getOption("symbols"))return symbolValue[symbolInternalProperty];if(!symbolValue)throw TypeError("Conversion from symbol to string");var desc=symbolValue[symbolDescriptionProperty];return void 0===desc&&(desc=""),"Symbol("+desc+")"})),$defineProperty(Symbol.prototype,"valueOf",method(function(){var symbolValue=this[symbolDataProperty];if(!symbolValue)throw TypeError("Conversion from symbol to string");return getOption("symbols")?symbolValue:symbolValue[symbolInternalProperty]})),$defineProperty(SymbolValue.prototype,"constructor",nonEnum(Symbol)),$defineProperty(SymbolValue.prototype,"toString",{value:Symbol.prototype.toString,enumerable:!1}),$defineProperty(SymbolValue.prototype,"valueOf",{value:Symbol.prototype.valueOf,enumerable:!1});var hashProperty=createPrivateName(),hashPropertyDescriptor={value:void 0},hashObjectProperties={hash:{value:void 0},self:{value:void 0}},hashCounter=0;Symbol.iterator=Symbol(),freeze(SymbolValue.prototype),setupGlobals(global),global.$traceurRuntime={createPrivateName:createPrivateName,exportStar:exportStar,getOwnHashObject:getOwnHashObject,privateNames:privateNames,setProperty:setProperty,setupGlobals:setupGlobals,toObject:toObject,isObject:isObject,toProperty:toProperty,type:types,"typeof":typeOf,checkObjectCoercible:checkObjectCoercible,hasOwnProperty:function(o,p){return hasOwnProperty.call(o,p)},defineProperties:$defineProperties,defineProperty:$defineProperty,getOwnPropertyDescriptor:$getOwnPropertyDescriptor,getOwnPropertyNames:$getOwnPropertyNames,keys:$keys}}}("undefined"!=typeof global?global:this),function(){"use strict";function spread(){for(var iterResult,rv=[],j=0,i=0;i<arguments.length;i++){var valueToSpread=$traceurRuntime.checkObjectCoercible(arguments[i]);if("function"!=typeof valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)])throw new TypeError("Cannot spread non-iterable object.");for(var iter=valueToSpread[$traceurRuntime.toProperty(Symbol.iterator)]();!(iterResult=iter.next()).done;)rv[j++]=iterResult.value}return rv}$traceurRuntime.spread=spread}(),function(){"use strict";function superDescriptor(homeObject,name){var proto=$getPrototypeOf(homeObject);do{var result=$getOwnPropertyDescriptor(proto,name);if(result)return result;proto=$getPrototypeOf(proto)}while(proto);return void 0}function superCall(self,homeObject,name,args){return superGet(self,homeObject,name).apply(self,args)}function superGet(self,homeObject,name){var descriptor=superDescriptor(homeObject,name);return descriptor?descriptor.get?descriptor.get.call(self):descriptor.value:void 0}function superSet(self,homeObject,name,value){var descriptor=superDescriptor(homeObject,name);if(descriptor&&descriptor.set)return descriptor.set.call(self,value),value;throw $TypeError("super has no setter '"+name+"'.")}function getDescriptors(object){for(var name,descriptors={},names=$getOwnPropertyNames(object),i=0;i<names.length;i++){var name=names[i];descriptors[name]=$getOwnPropertyDescriptor(object,name)}return descriptors}function createClass(ctor,object,staticObject,superClass){return $defineProperty(object,"constructor",{value:ctor,configurable:!0,enumerable:!1,writable:!0}),arguments.length>3?("function"==typeof superClass&&(ctor.__proto__=superClass),ctor.prototype=$create(getProtoParent(superClass),getDescriptors(object))):ctor.prototype=object,$defineProperty(ctor,"prototype",{configurable:!1,writable:!1}),$defineProperties(ctor,getDescriptors(staticObject))}function getProtoParent(superClass){if("function"==typeof superClass){var prototype=superClass.prototype;if($Object(prototype)===prototype||null===prototype)return superClass.prototype;throw new $TypeError("super prototype must be an Object or null")}if(null===superClass)return null;throw new $TypeError("Super expression must either be null or a function, not "+typeof superClass+".")}function defaultSuperCall(self,homeObject,args){null!==$getPrototypeOf(homeObject)&&superCall(self,homeObject,"constructor",args)}var $Object=Object,$TypeError=TypeError,$create=$Object.create,$defineProperties=$traceurRuntime.defineProperties,$defineProperty=$traceurRuntime.defineProperty,$getOwnPropertyDescriptor=$traceurRuntime.getOwnPropertyDescriptor,$getOwnPropertyNames=$traceurRuntime.getOwnPropertyNames,$getPrototypeOf=Object.getPrototypeOf;$traceurRuntime.createClass=createClass,$traceurRuntime.defaultSuperCall=defaultSuperCall,$traceurRuntime.superCall=superCall,$traceurRuntime.superGet=superGet,$traceurRuntime.superSet=superSet}(),function(){"use strict";function nonEnum(value){return{configurable:!0,enumerable:!1,value:value,writable:!0}}function getInternalError(state){return new Error("Traceur compiler bug: invalid state in state machine: "+state)}function GeneratorContext(){this.state=0,this.GState=ST_NEWBORN,this.storedException=void 0,this.finallyFallThrough=void 0,this.sent_=void 0,this.returnValue=void 0,this.tryStack_=[]}function nextOrThrow(ctx,moveNext,action,x){switch(ctx.GState){case ST_EXECUTING:throw new Error('"'+action+'" on executing generator');case ST_CLOSED:if("next"==action)return{value:void 0,done:!0};throw x;case ST_NEWBORN:if("throw"===action)throw ctx.GState=ST_CLOSED,x;if(void 0!==x)throw $TypeError("Sent value to newborn generator");case ST_SUSPENDED:ctx.GState=ST_EXECUTING,ctx.action=action,ctx.sent=x;var value=moveNext(ctx),done=value===ctx;return done&&(value=ctx.returnValue),ctx.GState=done?ST_CLOSED:ST_SUSPENDED,{value:value,done:done}}}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function createGeneratorInstance(innerFunction,functionObject,self){var moveNext=getMoveNext(innerFunction,self),ctx=new GeneratorContext,object=$create(functionObject.prototype);return object[ctxName]=ctx,object[moveNextName]=moveNext,object}function initGeneratorFunction(functionObject){return functionObject.prototype=$create(GeneratorFunctionPrototype.prototype),functionObject.__proto__=GeneratorFunctionPrototype,functionObject}function AsyncFunctionContext(){GeneratorContext.call(this),this.err=void 0;var ctx=this;ctx.result=new Promise(function(resolve,reject){ctx.resolve=resolve,ctx.reject=reject})}function asyncWrap(innerFunction,self){var moveNext=getMoveNext(innerFunction,self),ctx=new AsyncFunctionContext;return ctx.createCallback=function(newState){return function(value){ctx.state=newState,ctx.value=value,moveNext(ctx)}},ctx.errback=function(err){handleCatch(ctx,err),moveNext(ctx)},moveNext(ctx),ctx.result}function getMoveNext(innerFunction,self){return function(ctx){for(;;)try{return innerFunction.call(self,ctx)}catch(ex){handleCatch(ctx,ex)}}}function handleCatch(ctx,ex){ctx.storedException=ex;var last=ctx.tryStack_[ctx.tryStack_.length-1];return last?(ctx.state=void 0!==last.catch?last.catch:last.finally,void 0!==last.finallyFallThrough&&(ctx.finallyFallThrough=last.finallyFallThrough),void 0):(ctx.handleException(ex),void 0)}var createPrivateName=$traceurRuntime.createPrivateName,$defineProperties=$traceurRuntime.defineProperties,$defineProperty=$traceurRuntime.defineProperty,$create=Object.create,$TypeError=TypeError,ST_NEWBORN=0,ST_EXECUTING=1,ST_SUSPENDED=2,ST_CLOSED=3,END_STATE=-2,RETHROW_STATE=-3;GeneratorContext.prototype={pushTry:function(catchState,finallyState){if(null!==finallyState){for(var finallyFallThrough=null,i=this.tryStack_.length-1;i>=0;i--)if(void 0!==this.tryStack_[i].catch){finallyFallThrough=this.tryStack_[i].catch;break}null===finallyFallThrough&&(finallyFallThrough=RETHROW_STATE),this.tryStack_.push({"finally":finallyState,finallyFallThrough:finallyFallThrough})}null!==catchState&&this.tryStack_.push({"catch":catchState})},popTry:function(){this.tryStack_.pop()},get sent(){return this.maybeThrow(),this.sent_},set sent(v){this.sent_=v},get sentIgnoreThrow(){return this.sent_},maybeThrow:function(){if("throw"===this.action)throw this.action="next",this.sent_},end:function(){switch(this.state){case END_STATE:return this;case RETHROW_STATE:throw this.storedException;default:throw getInternalError(this.state)}},handleException:function(ex){throw this.GState=ST_CLOSED,this.state=END_STATE,ex}};var ctxName=createPrivateName(),moveNextName=createPrivateName();GeneratorFunction.prototype=GeneratorFunctionPrototype,$defineProperty(GeneratorFunctionPrototype,"constructor",nonEnum(GeneratorFunction)),GeneratorFunctionPrototype.prototype={constructor:GeneratorFunctionPrototype,next:function(v){return nextOrThrow(this[ctxName],this[moveNextName],"next",v)},"throw":function(v){return nextOrThrow(this[ctxName],this[moveNextName],"throw",v)}},$defineProperties(GeneratorFunctionPrototype.prototype,{constructor:{enumerable:!1},next:{enumerable:!1},"throw":{enumerable:!1}}),Object.defineProperty(GeneratorFunctionPrototype.prototype,Symbol.iterator,nonEnum(function(){return this})),AsyncFunctionContext.prototype=$create(GeneratorContext.prototype),AsyncFunctionContext.prototype.end=function(){switch(this.state){case END_STATE:this.resolve(this.returnValue);break;case RETHROW_STATE:this.reject(this.storedException);break;default:this.reject(getInternalError(this.state))}},AsyncFunctionContext.prototype.handleException=function(){this.state=RETHROW_STATE},$traceurRuntime.asyncWrap=asyncWrap,$traceurRuntime.initGeneratorFunction=initGeneratorFunction,$traceurRuntime.createGeneratorInstance=createGeneratorInstance}(),function(){function buildFromEncodedParts(opt_scheme,opt_userInfo,opt_domain,opt_port,opt_path,opt_queryData,opt_fragment){var out=[];return opt_scheme&&out.push(opt_scheme,":"),opt_domain&&(out.push("//"),opt_userInfo&&out.push(opt_userInfo,"@"),out.push(opt_domain),opt_port&&out.push(":",opt_port)),opt_path&&out.push(opt_path),opt_queryData&&out.push("?",opt_queryData),opt_fragment&&out.push("#",opt_fragment),out.join("")}function split(uri){return uri.match(splitRe)}function removeDotSegments(path){if("/"===path)return"/";for(var leadingSlash="/"===path[0]?"/":"",trailingSlash="/"===path.slice(-1)?"/":"",segments=path.split("/"),out=[],up=0,pos=0;pos<segments.length;pos++){var segment=segments[pos];switch(segment){case"":case".":break;case"..":out.length?out.pop():up++;break;default:out.push(segment)}}if(!leadingSlash){for(;up-->0;)out.unshift("..");0===out.length&&out.push(".")}return leadingSlash+out.join("/")+trailingSlash}function joinAndCanonicalizePath(parts){var path=parts[ComponentIndex.PATH]||"";return path=removeDotSegments(path),parts[ComponentIndex.PATH]=path,buildFromEncodedParts(parts[ComponentIndex.SCHEME],parts[ComponentIndex.USER_INFO],parts[ComponentIndex.DOMAIN],parts[ComponentIndex.PORT],parts[ComponentIndex.PATH],parts[ComponentIndex.QUERY_DATA],parts[ComponentIndex.FRAGMENT])}function canonicalizeUrl(url){var parts=split(url);return joinAndCanonicalizePath(parts)}function resolveUrl(base,url){var parts=split(url),baseParts=split(base);if(parts[ComponentIndex.SCHEME])return joinAndCanonicalizePath(parts);parts[ComponentIndex.SCHEME]=baseParts[ComponentIndex.SCHEME];for(var i=ComponentIndex.SCHEME;i<=ComponentIndex.PORT;i++)parts[i]||(parts[i]=baseParts[i]);if("/"==parts[ComponentIndex.PATH][0])return joinAndCanonicalizePath(parts);var path=baseParts[ComponentIndex.PATH],index=path.lastIndexOf("/");return path=path.slice(0,index+1)+parts[ComponentIndex.PATH],parts[ComponentIndex.PATH]=path,joinAndCanonicalizePath(parts)}function isAbsolute(name){if(!name)return!1;if("/"===name[0])return!0;var parts=split(name);return parts[ComponentIndex.SCHEME]?!0:!1}var splitRe=new RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$"),ComponentIndex={SCHEME:1,USER_INFO:2,DOMAIN:3,PORT:4,PATH:5,QUERY_DATA:6,FRAGMENT:7};$traceurRuntime.canonicalizeUrl=canonicalizeUrl,$traceurRuntime.isAbsolute=isAbsolute,$traceurRuntime.removeDotSegments=removeDotSegments,$traceurRuntime.resolveUrl=resolveUrl}(),function(global){"use strict";function getUncoatedModuleInstantiator(name){if(name){var url=ModuleStore.normalize(name);return moduleInstantiators[url]}}function Module(uncoatedModule){var isLive=arguments[1],coatedModule=Object.create(null);return Object.getOwnPropertyNames(uncoatedModule).forEach(function(name){var getter,value;if(isLive===liveModuleSentinel){var descr=Object.getOwnPropertyDescriptor(uncoatedModule,name);descr.get&&(getter=descr.get)}getter||(value=uncoatedModule[name],getter=function(){return value}),Object.defineProperty(coatedModule,name,{get:getter,enumerable:!0})}),Object.preventExtensions(coatedModule),coatedModule}var baseURL,$__2=$traceurRuntime,canonicalizeUrl=$__2.canonicalizeUrl,resolveUrl=$__2.resolveUrl,isAbsolute=$__2.isAbsolute,moduleInstantiators=Object.create(null);baseURL=global.location&&global.location.href?resolveUrl(global.location.href,"./"):"";var UncoatedModuleEntry=function(url,uncoatedModule){this.url=url,this.value_=uncoatedModule};$traceurRuntime.createClass(UncoatedModuleEntry,{},{});var ModuleEvaluationError=function(erroneousModuleName,cause){this.message=this.constructor.name+": "+this.stripCause(cause)+" in "+erroneousModuleName,this.stack=cause instanceof $ModuleEvaluationError||!cause.stack?"":this.stripStack(cause.stack)},$ModuleEvaluationError=ModuleEvaluationError;$traceurRuntime.createClass(ModuleEvaluationError,{stripError:function(message){return message.replace(/.*Error:/,this.constructor.name+":")},stripCause:function(cause){return cause?cause.message?this.stripError(cause.message):cause+"":""},loadedBy:function(moduleName){this.stack+="\n loaded by "+moduleName},stripStack:function(causeStack){var stack=[];return causeStack.split("\n").some(function(frame){return/UncoatedModuleInstantiator/.test(frame)?!0:(stack.push(frame),void 0)}),stack[0]=this.stripError(stack[0]),stack.join("\n")}},{},Error);var UncoatedModuleInstantiator=function(url,func){$traceurRuntime.superCall(this,$UncoatedModuleInstantiator.prototype,"constructor",[url,null]),this.func=func},$UncoatedModuleInstantiator=UncoatedModuleInstantiator;$traceurRuntime.createClass(UncoatedModuleInstantiator,{getUncoatedModule:function(){if(this.value_)return this.value_;try{return this.value_=this.func.call(global)}catch(ex){if(ex instanceof ModuleEvaluationError)throw ex.loadedBy(this.url),ex;throw new ModuleEvaluationError(this.url,ex)}}},{},UncoatedModuleEntry);var moduleInstances=Object.create(null),liveModuleSentinel={},ModuleStore={normalize:function(name,refererName){if("string"!=typeof name)throw new TypeError("module name must be a string, not "+typeof name);if(isAbsolute(name))return canonicalizeUrl(name);if(/[^\.]\/\.\.\//.test(name))throw new Error("module name embeds /../: "+name);return"."===name[0]&&refererName?resolveUrl(refererName,name):canonicalizeUrl(name)},get:function(normalizedName){var m=getUncoatedModuleInstantiator(normalizedName);if(!m)return void 0;var moduleInstance=moduleInstances[m.url];return moduleInstance?moduleInstance:(moduleInstance=Module(m.getUncoatedModule(),liveModuleSentinel),moduleInstances[m.url]=moduleInstance)},set:function(normalizedName,module){normalizedName=String(normalizedName),moduleInstantiators[normalizedName]=new UncoatedModuleInstantiator(normalizedName,function(){return module}),moduleInstances[normalizedName]=module},get baseURL(){return baseURL},set baseURL(v){baseURL=String(v)},registerModule:function(name,func){var normalizedName=ModuleStore.normalize(name);if(moduleInstantiators[normalizedName])throw new Error("duplicate module named "+normalizedName);moduleInstantiators[normalizedName]=new UncoatedModuleInstantiator(normalizedName,func)},bundleStore:Object.create(null),register:function(name,deps,func){deps&&(deps.length||func.length)?this.bundleStore[name]={deps:deps,execute:function(){var $__0=arguments,depMap={};deps.forEach(function(dep,index){return depMap[dep]=$__0[index]});var registryEntry=func.call(this,depMap);return registryEntry.execute.call(this),registryEntry.exports}}:this.registerModule(name,func)},getAnonymousModule:function(func){return new Module(func.call(global),liveModuleSentinel)},getForTesting:function(name){var $__0=this;return this.testingPrefix_||Object.keys(moduleInstances).some(function(key){var m=/(traceur@[^\/]*\/)/.exec(key);return m?($__0.testingPrefix_=m[1],!0):void 0}),this.get(this.testingPrefix_+name)}};ModuleStore.set("@traceur/src/runtime/ModuleStore",new Module({ModuleStore:ModuleStore}));var setupGlobals=$traceurRuntime.setupGlobals;$traceurRuntime.setupGlobals=function(global){setupGlobals(global)},$traceurRuntime.ModuleStore=ModuleStore,global.System={register:ModuleStore.register.bind(ModuleStore),get:ModuleStore.get,set:ModuleStore.set,normalize:ModuleStore.normalize},$traceurRuntime.getModuleImpl=function(name){var instantiator=getUncoatedModuleInstantiator(name);return instantiator&&instantiator.getUncoatedModule()}}("undefined"!=typeof global?global:this),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/utils",[],function(){"use strict";function toUint32(x){return x>>>0}function isObject(x){return x&&("object"==typeof x||"function"==typeof x)}function isCallable(x){return"function"==typeof x}function isNumber(x){return"number"==typeof x}function toInteger(x){return x=+x,$isNaN(x)?0:0!==x&&$isFinite(x)?x>0?$floor(x):$ceil(x):x}function toLength(x){var len=toInteger(x);return 0>len?0:$min(len,MAX_SAFE_LENGTH)}function checkIterable(x){return isObject(x)?x[Symbol.iterator]:void 0}function isConstructor(x){return isCallable(x)}function createIteratorResultObject(value,done){return{value:value,done:done}}function maybeDefine(object,name,descr){name in object||Object.defineProperty(object,name,descr)}function maybeDefineMethod(object,name,value){maybeDefine(object,name,{value:value,configurable:!0,enumerable:!1,writable:!0})}function maybeDefineConst(object,name,value){maybeDefine(object,name,{value:value,configurable:!1,enumerable:!1,writable:!1})}function maybeAddFunctions(object,functions){for(var i=0;i<functions.length;i+=2){var name=functions[i],value=functions[i+1];maybeDefineMethod(object,name,value)}}function maybeAddConsts(object,consts){for(var i=0;i<consts.length;i+=2){var name=consts[i],value=consts[i+1];maybeDefineConst(object,name,value)}}function maybeAddIterator(object,func,Symbol){Symbol&&Symbol.iterator&&!object[Symbol.iterator]&&(object["@@iterator"]&&(func=object["@@iterator"]),Object.defineProperty(object,Symbol.iterator,{value:func,configurable:!0,enumerable:!1,writable:!0}))}function registerPolyfill(func){polyfills.push(func)}function polyfillAll(global){polyfills.forEach(function(f){return f(global)})}var $ceil=Math.ceil,$floor=Math.floor,$isFinite=isFinite,$isNaN=isNaN,$pow=Math.pow,$min=Math.min,toObject=$traceurRuntime.toObject,MAX_SAFE_LENGTH=$pow(2,53)-1,polyfills=[];return{get toObject(){return toObject},get toUint32(){return toUint32},get isObject(){return isObject},get isCallable(){return isCallable},get isNumber(){return isNumber},get toInteger(){return toInteger},get toLength(){return toLength},get checkIterable(){return checkIterable},get isConstructor(){return isConstructor},get createIteratorResultObject(){return createIteratorResultObject},get maybeDefine(){return maybeDefine},get maybeDefineMethod(){return maybeDefineMethod},get maybeDefineConst(){return maybeDefineConst},get maybeAddFunctions(){return maybeAddFunctions},get maybeAddConsts(){return maybeAddConsts},get maybeAddIterator(){return maybeAddIterator},get registerPolyfill(){return registerPolyfill},get polyfillAll(){return polyfillAll}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Map",[],function(){"use strict";function lookupIndex(map,key){if(isObject(key)){var hashObject=getOwnHashObject(key);return hashObject&&map.objectIndex_[hashObject.hash]}return"string"==typeof key?map.stringIndex_[key]:map.primitiveIndex_[key]}function initMap(map){map.entries_=[],map.objectIndex_=Object.create(null),map.stringIndex_=Object.create(null),map.primitiveIndex_=Object.create(null),map.deletedCount_=0}function polyfillMap(global){var $__7=global,Object=$__7.Object,Symbol=$__7.Symbol;global.Map||(global.Map=Map);var mapPrototype=global.Map.prototype;mapPrototype.entries&&(maybeAddIterator(mapPrototype,mapPrototype.entries,Symbol),maybeAddIterator(Object.getPrototypeOf((new global.Map).entries()),function(){return this},Symbol))}var $__3=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),isObject=$__3.isObject,maybeAddIterator=$__3.maybeAddIterator,registerPolyfill=$__3.registerPolyfill,getOwnHashObject=$traceurRuntime.getOwnHashObject,$hasOwnProperty=Object.prototype.hasOwnProperty,deletedSentinel={},Map=function(){var iterable=arguments[0];if(!isObject(this))throw new TypeError("Map called on incompatible type");if($hasOwnProperty.call(this,"entries_"))throw new TypeError("Map can not be reentrantly initialised");if(initMap(this),null!==iterable&&void 0!==iterable)for(var $__6,$__5=iterable[Symbol.iterator]();!($__6=$__5.next()).done;){var $__7=$__6.value,key=$__7[0],value=$__7[1];this.set(key,value)}};return $traceurRuntime.createClass(Map,{get size(){return this.entries_.length/2-this.deletedCount_},get:function(key){var index=lookupIndex(this,key);return void 0!==index?this.entries_[index+1]:void 0},set:function(key,value){var objectMode=isObject(key),stringMode="string"==typeof key,index=lookupIndex(this,key);if(void 0!==index)this.entries_[index+1]=value;else if(index=this.entries_.length,this.entries_[index]=key,this.entries_[index+1]=value,objectMode){var hashObject=getOwnHashObject(key),hash=hashObject.hash;this.objectIndex_[hash]=index}else stringMode?this.stringIndex_[key]=index:this.primitiveIndex_[key]=index;return this},has:function(key){return void 0!==lookupIndex(this,key)},"delete":function(key){var index,hash,objectMode=isObject(key),stringMode="string"==typeof key;if(objectMode){var hashObject=getOwnHashObject(key);hashObject&&(index=this.objectIndex_[hash=hashObject.hash],delete this.objectIndex_[hash])}else stringMode?(index=this.stringIndex_[key],delete this.stringIndex_[key]):(index=this.primitiveIndex_[key],delete this.primitiveIndex_[key]);return void 0!==index?(this.entries_[index]=deletedSentinel,this.entries_[index+1]=void 0,this.deletedCount_++,!0):!1},clear:function(){initMap(this)},forEach:function(callbackFn){for(var thisArg=arguments[1],i=0;i<this.entries_.length;i+=2){var key=this.entries_[i],value=this.entries_[i+1];key!==deletedSentinel&&callbackFn.call(thisArg,value,key,this)}},entries:$traceurRuntime.initGeneratorFunction(function $__8(){var i,key,value;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:i=0,$ctx.state=12;break;case 12:$ctx.state=i<this.entries_.length?8:-2;break;case 4:i+=2,$ctx.state=12;break;case 8:key=this.entries_[i],value=this.entries_[i+1],$ctx.state=9;break;case 9:$ctx.state=key===deletedSentinel?4:6;break;case 6:return $ctx.state=2,[key,value];case 2:$ctx.maybeThrow(),$ctx.state=4;break;default:return $ctx.end()}},$__8,this)}),keys:$traceurRuntime.initGeneratorFunction(function $__9(){var i,key,value;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:i=0,$ctx.state=12;break;case 12:$ctx.state=i<this.entries_.length?8:-2;break;case 4:i+=2,$ctx.state=12;break;case 8:key=this.entries_[i],value=this.entries_[i+1],$ctx.state=9;break;case 9:$ctx.state=key===deletedSentinel?4:6;break;case 6:return $ctx.state=2,key;case 2:$ctx.maybeThrow(),$ctx.state=4;break;default:return $ctx.end()}},$__9,this)}),values:$traceurRuntime.initGeneratorFunction(function $__10(){var i,key,value;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:i=0,$ctx.state=12;
break;case 12:$ctx.state=i<this.entries_.length?8:-2;break;case 4:i+=2,$ctx.state=12;break;case 8:key=this.entries_[i],value=this.entries_[i+1],$ctx.state=9;break;case 9:$ctx.state=key===deletedSentinel?4:6;break;case 6:return $ctx.state=2,value;case 2:$ctx.maybeThrow(),$ctx.state=4;break;default:return $ctx.end()}},$__10,this)})},{}),Object.defineProperty(Map.prototype,Symbol.iterator,{configurable:!0,writable:!0,value:Map.prototype.entries}),registerPolyfill(polyfillMap),{get Map(){return Map},get polyfillMap(){return polyfillMap}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Map"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Set",[],function(){"use strict";function initSet(set){set.map_=new Map}function polyfillSet(global){var $__17=global,Object=$__17.Object,Symbol=$__17.Symbol;global.Set||(global.Set=Set);var setPrototype=global.Set.prototype;setPrototype.values&&(maybeAddIterator(setPrototype,setPrototype.values,Symbol),maybeAddIterator(Object.getPrototypeOf((new global.Set).values()),function(){return this},Symbol))}var $__11=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),isObject=$__11.isObject,maybeAddIterator=$__11.maybeAddIterator,registerPolyfill=$__11.registerPolyfill,Map=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Map").Map,$hasOwnProperty=($traceurRuntime.getOwnHashObject,Object.prototype.hasOwnProperty),Set=function(){var iterable=arguments[0];if(!isObject(this))throw new TypeError("Set called on incompatible type");if($hasOwnProperty.call(this,"map_"))throw new TypeError("Set can not be reentrantly initialised");if(initSet(this),null!==iterable&&void 0!==iterable)for(var $__16,$__15=iterable[Symbol.iterator]();!($__16=$__15.next()).done;){var item=$__16.value;this.add(item)}};return $traceurRuntime.createClass(Set,{get size(){return this.map_.size},has:function(key){return this.map_.has(key)},add:function(key){return this.map_.set(key,key),this},"delete":function(key){return this.map_.delete(key)},clear:function(){return this.map_.clear()},forEach:function(callbackFn){var thisArg=arguments[1],$__13=this;return this.map_.forEach(function(value,key){callbackFn.call(thisArg,key,key,$__13)})},values:$traceurRuntime.initGeneratorFunction(function $__18(){var $__19,$__20;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:$__19=this.map_.keys()[Symbol.iterator](),$ctx.sent=void 0,$ctx.action="next",$ctx.state=12;break;case 12:$__20=$__19[$ctx.action]($ctx.sentIgnoreThrow),$ctx.state=9;break;case 9:$ctx.state=$__20.done?3:2;break;case 3:$ctx.sent=$__20.value,$ctx.state=-2;break;case 2:return $ctx.state=12,$__20.value;default:return $ctx.end()}},$__18,this)}),entries:$traceurRuntime.initGeneratorFunction(function $__21(){var $__22,$__23;return $traceurRuntime.createGeneratorInstance(function($ctx){for(;;)switch($ctx.state){case 0:$__22=this.map_.entries()[Symbol.iterator](),$ctx.sent=void 0,$ctx.action="next",$ctx.state=12;break;case 12:$__23=$__22[$ctx.action]($ctx.sentIgnoreThrow),$ctx.state=9;break;case 9:$ctx.state=$__23.done?3:2;break;case 3:$ctx.sent=$__23.value,$ctx.state=-2;break;case 2:return $ctx.state=12,$__23.value;default:return $ctx.end()}},$__21,this)})},{}),Object.defineProperty(Set.prototype,Symbol.iterator,{configurable:!0,writable:!0,value:Set.prototype.values}),Object.defineProperty(Set.prototype,"keys",{configurable:!0,writable:!0,value:Set.prototype.values}),registerPolyfill(polyfillSet),{get Set(){return Set},get polyfillSet(){return polyfillSet}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Set"),System.register("traceur-runtime@0.0.62/node_modules/rsvp/lib/rsvp/asap",[],function(){"use strict";function asap(callback,arg){queue[len]=callback,queue[len+1]=arg,len+=2,2===len&&scheduleFlush()}function useNextTick(){return function(){process.nextTick(flush)}}function useMutationObserver(){var iterations=0,observer=new BrowserMutationObserver(flush),node=document.createTextNode("");return observer.observe(node,{characterData:!0}),function(){node.data=iterations=++iterations%2}}function useMessageChannel(){var channel=new MessageChannel;return channel.port1.onmessage=flush,function(){channel.port2.postMessage(0)}}function useSetTimeout(){return function(){setTimeout(flush,1)}}function flush(){for(var i=0;len>i;i+=2){var callback=queue[i],arg=queue[i+1];callback(arg),queue[i]=void 0,queue[i+1]=void 0}len=0}var scheduleFlush,len=0,$__default=asap,browserGlobal="undefined"!=typeof window?window:{},BrowserMutationObserver=browserGlobal.MutationObserver||browserGlobal.WebKitMutationObserver,isWorker="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,queue=new Array(1e3);return scheduleFlush="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?useNextTick():BrowserMutationObserver?useMutationObserver():isWorker?useMessageChannel():useSetTimeout(),{get default(){return $__default}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Promise",[],function(){"use strict";function isPromise(x){return x&&"object"==typeof x&&void 0!==x.status_}function idResolveHandler(x){return x}function idRejectHandler(x){throw x}function chain(promise){var onResolve=void 0!==arguments[1]?arguments[1]:idResolveHandler,onReject=void 0!==arguments[2]?arguments[2]:idRejectHandler,deferred=getDeferred(promise.constructor);switch(promise.status_){case void 0:throw TypeError;case 0:promise.onResolve_.push(onResolve,deferred),promise.onReject_.push(onReject,deferred);break;case 1:promiseEnqueue(promise.value_,[onResolve,deferred]);break;case-1:promiseEnqueue(promise.value_,[onReject,deferred])}return deferred.promise}function getDeferred(C){if(this===$Promise){var promise=promiseInit(new $Promise(promiseRaw));return{promise:promise,resolve:function(x){promiseResolve(promise,x)},reject:function(r){promiseReject(promise,r)}}}var result={};return result.promise=new C(function(resolve,reject){result.resolve=resolve,result.reject=reject}),result}function promiseSet(promise,status,value,onResolve,onReject){return promise.status_=status,promise.value_=value,promise.onResolve_=onResolve,promise.onReject_=onReject,promise}function promiseInit(promise){return promiseSet(promise,0,void 0,[],[])}function promiseResolve(promise,x){promiseDone(promise,1,x,promise.onResolve_)}function promiseReject(promise,r){promiseDone(promise,-1,r,promise.onReject_)}function promiseDone(promise,status,value,reactions){0===promise.status_&&(promiseEnqueue(value,reactions),promiseSet(promise,status,value))}function promiseEnqueue(value,tasks){async(function(){for(var i=0;i<tasks.length;i+=2)promiseHandle(value,tasks[i],tasks[i+1])})}function promiseHandle(value,handler,deferred){try{var result=handler(value);if(result===deferred.promise)throw new TypeError;isPromise(result)?chain(result,deferred.resolve,deferred.reject):deferred.resolve(result)}catch(e){try{deferred.reject(e)}catch(e){}}}function isObject(x){return x&&("object"==typeof x||"function"==typeof x)}function promiseCoerce(constructor,x){if(!isPromise(x)&&isObject(x)){var then;try{then=x.then}catch(r){var promise=$PromiseReject.call(constructor,r);return x[thenableSymbol]=promise,promise}if("function"==typeof then){var p=x[thenableSymbol];if(p)return p;var deferred=getDeferred(constructor);x[thenableSymbol]=deferred.promise;try{then.call(x,deferred.resolve,deferred.reject)}catch(r){deferred.reject(r)}return deferred.promise}}return x}function polyfillPromise(global){global.Promise||(global.Promise=Promise)}var async=System.get("traceur-runtime@0.0.62/node_modules/rsvp/lib/rsvp/asap").default,registerPolyfill=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils").registerPolyfill,promiseRaw={},Promise=function(resolver){if(resolver!==promiseRaw){if("function"!=typeof resolver)throw new TypeError;var promise=promiseInit(this);try{resolver(function(x){promiseResolve(promise,x)},function(r){promiseReject(promise,r)})}catch(e){promiseReject(promise,e)}}};$traceurRuntime.createClass(Promise,{"catch":function(onReject){return this.then(void 0,onReject)},then:function(onResolve,onReject){"function"!=typeof onResolve&&(onResolve=idResolveHandler),"function"!=typeof onReject&&(onReject=idRejectHandler);var that=this,constructor=this.constructor;return chain(this,function(x){return x=promiseCoerce(constructor,x),x===that?onReject(new TypeError):isPromise(x)?x.then(onResolve,onReject):onResolve(x)},onReject)}},{resolve:function(x){return this===$Promise?isPromise(x)?x:promiseSet(new $Promise(promiseRaw),1,x):new this(function(resolve){resolve(x)})},reject:function(r){return this===$Promise?promiseSet(new $Promise(promiseRaw),-1,r):new this(function(resolve,reject){reject(r)})},all:function(values){var deferred=getDeferred(this),resolutions=[];try{var count=values.length;if(0===count)deferred.resolve(resolutions);else for(var i=0;i<values.length;i++)this.resolve(values[i]).then(function(i,x){resolutions[i]=x,0===--count&&deferred.resolve(resolutions)}.bind(void 0,i),function(r){deferred.reject(r)})}catch(e){deferred.reject(e)}return deferred.promise},race:function(values){var deferred=getDeferred(this);try{for(var i=0;i<values.length;i++)this.resolve(values[i]).then(function(x){deferred.resolve(x)},function(r){deferred.reject(r)})}catch(e){deferred.reject(e)}return deferred.promise}});var $Promise=Promise,$PromiseReject=$Promise.reject,thenableSymbol="@@thenable";return registerPolyfill(polyfillPromise),{get Promise(){return Promise},get polyfillPromise(){return polyfillPromise}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Promise"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/StringIterator",[],function(){"use strict";function createStringIterator(string){var s=String(string),iterator=Object.create(StringIterator.prototype);return iterator[toProperty(iteratedString)]=s,iterator[toProperty(stringIteratorNextIndex)]=0,iterator}var $__29,$__27=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),createIteratorResultObject=$__27.createIteratorResultObject,isObject=$__27.isObject,$__30=$traceurRuntime,hasOwnProperty=$__30.hasOwnProperty,toProperty=$__30.toProperty,iteratedString=Symbol("iteratedString"),stringIteratorNextIndex=Symbol("stringIteratorNextIndex"),StringIterator=function(){};return $traceurRuntime.createClass(StringIterator,($__29={},Object.defineProperty($__29,"next",{value:function(){var o=this;if(!isObject(o)||!hasOwnProperty(o,iteratedString))throw new TypeError("this must be a StringIterator object");var s=o[toProperty(iteratedString)];if(void 0===s)return createIteratorResultObject(void 0,!0);var position=o[toProperty(stringIteratorNextIndex)],len=s.length;if(position>=len)return o[toProperty(iteratedString)]=void 0,createIteratorResultObject(void 0,!0);var resultString,first=s.charCodeAt(position);if(55296>first||first>56319||position+1===len)resultString=String.fromCharCode(first);else{var second=s.charCodeAt(position+1);resultString=56320>second||second>57343?String.fromCharCode(first):String.fromCharCode(first)+String.fromCharCode(second)}return o[toProperty(stringIteratorNextIndex)]=position+resultString.length,createIteratorResultObject(resultString,!1)},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty($__29,Symbol.iterator,{value:function(){return this},configurable:!0,enumerable:!0,writable:!0}),$__29),{}),{get createStringIterator(){return createStringIterator}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/String",[],function(){"use strict";function startsWith(search){var string=String(this);if(null==this||"[object RegExp]"==$toString.call(search))throw TypeError();var stringLength=string.length,searchString=String(search),position=(searchString.length,arguments.length>1?arguments[1]:void 0),pos=position?Number(position):0;isNaN(pos)&&(pos=0);var start=Math.min(Math.max(pos,0),stringLength);return $indexOf.call(string,searchString,pos)==start}function endsWith(search){var string=String(this);if(null==this||"[object RegExp]"==$toString.call(search))throw TypeError();var stringLength=string.length,searchString=String(search),searchLength=searchString.length,pos=stringLength;if(arguments.length>1){var position=arguments[1];void 0!==position&&(pos=position?Number(position):0,isNaN(pos)&&(pos=0))}var end=Math.min(Math.max(pos,0),stringLength),start=end-searchLength;return 0>start?!1:$lastIndexOf.call(string,searchString,start)==start}function contains(search){if(null==this)throw TypeError();var string=String(this),stringLength=string.length,searchString=String(search),position=(searchString.length,arguments.length>1?arguments[1]:void 0),pos=position?Number(position):0;isNaN(pos)&&(pos=0);Math.min(Math.max(pos,0),stringLength);return-1!=$indexOf.call(string,searchString,pos)}function repeat(count){if(null==this)throw TypeError();var string=String(this),n=count?Number(count):0;if(isNaN(n)&&(n=0),0>n||1/0==n)throw RangeError();if(0==n)return"";for(var result="";n--;)result+=string;return result}function codePointAt(position){if(null==this)throw TypeError();var string=String(this),size=string.length,index=position?Number(position):0;if(isNaN(index)&&(index=0),0>index||index>=size)return void 0;var second,first=string.charCodeAt(index);return first>=55296&&56319>=first&&size>index+1&&(second=string.charCodeAt(index+1),second>=56320&&57343>=second)?1024*(first-55296)+second-56320+65536:first}function raw(callsite){var raw=callsite.raw,len=raw.length>>>0;if(0===len)return"";for(var s="",i=0;;){if(s+=raw[i],i+1===len)return s;s+=arguments[++i]}}function fromCodePoint(){var highSurrogate,lowSurrogate,codeUnits=[],floor=Math.floor,index=-1,length=arguments.length;if(!length)return"";for(;++index<length;){var codePoint=Number(arguments[index]);if(!isFinite(codePoint)||0>codePoint||codePoint>1114111||floor(codePoint)!=codePoint)throw RangeError("Invalid code point: "+codePoint);65535>=codePoint?codeUnits.push(codePoint):(codePoint-=65536,highSurrogate=(codePoint>>10)+55296,lowSurrogate=codePoint%1024+56320,codeUnits.push(highSurrogate,lowSurrogate))}return String.fromCharCode.apply(null,codeUnits)}function stringPrototypeIterator(){var o=$traceurRuntime.checkObjectCoercible(this),s=String(o);return createStringIterator(s)}function polyfillString(global){var String=global.String;maybeAddFunctions(String.prototype,["codePointAt",codePointAt,"contains",contains,"endsWith",endsWith,"startsWith",startsWith,"repeat",repeat]),maybeAddFunctions(String,["fromCodePoint",fromCodePoint,"raw",raw]),maybeAddIterator(String.prototype,stringPrototypeIterator,Symbol)}var createStringIterator=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/StringIterator").createStringIterator,$__32=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),maybeAddFunctions=$__32.maybeAddFunctions,maybeAddIterator=$__32.maybeAddIterator,registerPolyfill=$__32.registerPolyfill,$toString=Object.prototype.toString,$indexOf=String.prototype.indexOf,$lastIndexOf=String.prototype.lastIndexOf;return registerPolyfill(polyfillString),{get startsWith(){return startsWith},get endsWith(){return endsWith},get contains(){return contains},get repeat(){return repeat},get codePointAt(){return codePointAt},get raw(){return raw},get fromCodePoint(){return fromCodePoint},get stringPrototypeIterator(){return stringPrototypeIterator},get polyfillString(){return polyfillString}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/String"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/ArrayIterator",[],function(){"use strict";function createArrayIterator(array,kind){var object=toObject(array),iterator=new ArrayIterator;return iterator.iteratorObject_=object,iterator.arrayIteratorNextIndex_=0,iterator.arrayIterationKind_=kind,iterator}function entries(){return createArrayIterator(this,ARRAY_ITERATOR_KIND_ENTRIES)}function keys(){return createArrayIterator(this,ARRAY_ITERATOR_KIND_KEYS)}function values(){return createArrayIterator(this,ARRAY_ITERATOR_KIND_VALUES)}var $__36,$__34=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),toObject=$__34.toObject,toUint32=$__34.toUint32,createIteratorResultObject=$__34.createIteratorResultObject,ARRAY_ITERATOR_KIND_KEYS=1,ARRAY_ITERATOR_KIND_VALUES=2,ARRAY_ITERATOR_KIND_ENTRIES=3,ArrayIterator=function(){};return $traceurRuntime.createClass(ArrayIterator,($__36={},Object.defineProperty($__36,"next",{value:function(){var iterator=toObject(this),array=iterator.iteratorObject_;if(!array)throw new TypeError("Object is not an ArrayIterator");var index=iterator.arrayIteratorNextIndex_,itemKind=iterator.arrayIterationKind_,length=toUint32(array.length);return index>=length?(iterator.arrayIteratorNextIndex_=1/0,createIteratorResultObject(void 0,!0)):(iterator.arrayIteratorNextIndex_=index+1,itemKind==ARRAY_ITERATOR_KIND_VALUES?createIteratorResultObject(array[index],!1):itemKind==ARRAY_ITERATOR_KIND_ENTRIES?createIteratorResultObject([index,array[index]],!1):createIteratorResultObject(index,!1))},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty($__36,Symbol.iterator,{value:function(){return this},configurable:!0,enumerable:!0,writable:!0}),$__36),{}),{get entries(){return entries},get keys(){return keys},get values(){return values}}}),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Array",[],function(){"use strict";function from(arrLike){var arr,len,mapFn=arguments[1],thisArg=arguments[2],C=this,items=toObject(arrLike),mapping=void 0!==mapFn,k=0;if(mapping&&!isCallable(mapFn))throw TypeError();if(checkIterable(items)){arr=isConstructor(C)?new C:[];for(var $__40,$__39=items[Symbol.iterator]();!($__40=$__39.next()).done;){var item=$__40.value;arr[k]=mapping?mapFn.call(thisArg,item,k):item,k++}return arr.length=k,arr}for(len=toLength(items.length),arr=isConstructor(C)?new C(len):new Array(len);len>k;k++)arr[k]=mapping?"undefined"==typeof thisArg?mapFn(items[k],k):mapFn.call(thisArg,items[k],k):items[k];return arr.length=len,arr}function of(){for(var items=[],$__41=0;$__41<arguments.length;$__41++)items[$__41]=arguments[$__41];for(var C=this,len=items.length,arr=isConstructor(C)?new C(len):new Array(len),k=0;len>k;k++)arr[k]=items[k];return arr.length=len,arr}function fill(value){var start=void 0!==arguments[1]?arguments[1]:0,end=arguments[2],object=toObject(this),len=toLength(object.length),fillStart=toInteger(start),fillEnd=void 0!==end?toInteger(end):len;for(fillStart=0>fillStart?Math.max(len+fillStart,0):Math.min(fillStart,len),fillEnd=0>fillEnd?Math.max(len+fillEnd,0):Math.min(fillEnd,len);fillEnd>fillStart;)object[fillStart]=value,fillStart++;return object}function find(predicate){var thisArg=arguments[1];return findHelper(this,predicate,thisArg)}function findIndex(predicate){var thisArg=arguments[1];return findHelper(this,predicate,thisArg,!0)}function findHelper(self,predicate){var thisArg=arguments[2],returnIndex=void 0!==arguments[3]?arguments[3]:!1,object=toObject(self),len=toLength(object.length);if(!isCallable(predicate))throw TypeError();for(var i=0;len>i;i++)if(i in object){var value=object[i];if(predicate.call(thisArg,value,i,object))return returnIndex?i:value}return returnIndex?-1:void 0}function polyfillArray(global){var $__42=global,Array=$__42.Array,Object=$__42.Object,Symbol=$__42.Symbol;maybeAddFunctions(Array.prototype,["entries",entries,"keys",keys,"values",values,"fill",fill,"find",find,"findIndex",findIndex]),maybeAddFunctions(Array,["from",from,"of",of]),maybeAddIterator(Array.prototype,values,Symbol),maybeAddIterator(Object.getPrototypeOf([].values()),function(){return this},Symbol)}var $__37=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/ArrayIterator"),entries=$__37.entries,keys=$__37.keys,values=$__37.values,$__38=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),checkIterable=$__38.checkIterable,isCallable=$__38.isCallable,isConstructor=$__38.isConstructor,maybeAddFunctions=$__38.maybeAddFunctions,maybeAddIterator=$__38.maybeAddIterator,registerPolyfill=$__38.registerPolyfill,toInteger=$__38.toInteger,toLength=$__38.toLength,toObject=$__38.toObject;return registerPolyfill(polyfillArray),{get from(){return from},get of(){return of},get fill(){return fill},get find(){return find},get findIndex(){return findIndex},get polyfillArray(){return polyfillArray}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Array"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Object",[],function(){"use strict";function is(left,right){return left===right?0!==left||1/left===1/right:left!==left&&right!==right}function assign(target){for(var i=1;i<arguments.length;i++){var p,source=arguments[i],props=keys(source),length=props.length;for(p=0;length>p;p++){var name=props[p];privateNames[name]||(target[name]=source[name])}}return target}function mixin(target,source){var p,descriptor,props=getOwnPropertyNames(source),length=props.length;for(p=0;length>p;p++){var name=props[p];privateNames[name]||(descriptor=getOwnPropertyDescriptor(source,props[p]),defineProperty(target,props[p],descriptor))}return target}function polyfillObject(global){var Object=global.Object;maybeAddFunctions(Object,["assign",assign,"is",is,"mixin",mixin])}var $__43=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),maybeAddFunctions=$__43.maybeAddFunctions,registerPolyfill=$__43.registerPolyfill,$__44=$traceurRuntime,defineProperty=$__44.defineProperty,getOwnPropertyDescriptor=$__44.getOwnPropertyDescriptor,getOwnPropertyNames=$__44.getOwnPropertyNames,keys=$__44.keys,privateNames=$__44.privateNames;return registerPolyfill(polyfillObject),{get is(){return is},get assign(){return assign},get mixin(){return mixin},get polyfillObject(){return polyfillObject}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Object"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/Number",[],function(){"use strict";function NumberIsFinite(number){return isNumber(number)&&$isFinite(number)}function isInteger(number){return NumberIsFinite(number)&&toInteger(number)===number}function NumberIsNaN(number){return isNumber(number)&&$isNaN(number)}function isSafeInteger(number){if(NumberIsFinite(number)){var integral=toInteger(number);if(integral===number)return $abs(integral)<=MAX_SAFE_INTEGER}return!1}function polyfillNumber(global){var Number=global.Number;maybeAddConsts(Number,["MAX_SAFE_INTEGER",MAX_SAFE_INTEGER,"MIN_SAFE_INTEGER",MIN_SAFE_INTEGER,"EPSILON",EPSILON]),maybeAddFunctions(Number,["isFinite",NumberIsFinite,"isInteger",isInteger,"isNaN",NumberIsNaN,"isSafeInteger",isSafeInteger])}var $__46=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils"),isNumber=$__46.isNumber,maybeAddConsts=$__46.maybeAddConsts,maybeAddFunctions=$__46.maybeAddFunctions,registerPolyfill=$__46.registerPolyfill,toInteger=$__46.toInteger,$abs=Math.abs,$isFinite=isFinite,$isNaN=isNaN,MAX_SAFE_INTEGER=Math.pow(2,53)-1,MIN_SAFE_INTEGER=-Math.pow(2,53)+1,EPSILON=Math.pow(2,-52);return registerPolyfill(polyfillNumber),{get MAX_SAFE_INTEGER(){return MAX_SAFE_INTEGER},get MIN_SAFE_INTEGER(){return MIN_SAFE_INTEGER},get EPSILON(){return EPSILON},get isFinite(){return NumberIsFinite},get isInteger(){return isInteger},get isNaN(){return NumberIsNaN},get isSafeInteger(){return isSafeInteger},get polyfillNumber(){return polyfillNumber}}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/Number"),System.register("traceur-runtime@0.0.62/src/runtime/polyfills/polyfills",[],function(){"use strict";var polyfillAll=System.get("traceur-runtime@0.0.62/src/runtime/polyfills/utils").polyfillAll;polyfillAll(this);var setupGlobals=$traceurRuntime.setupGlobals;return $traceurRuntime.setupGlobals=function(global){setupGlobals(global),polyfillAll(global)},{}}),System.get("traceur-runtime@0.0.62/src/runtime/polyfills/polyfills")}).call(this,require("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:3}],5:[function(require,module,exports){"use strict";!function(e,t,i,n){var o,a,s,d,c,l,u,m,f,h,p,v,w,y,C,S,k,x,F,E,W,U;o=function(){var r={URL:e.URL||e.webkitURL||e.mozURL||e.msURL,getUserMedia:function(){var e=i.getUserMedia||i.webkitGetUserMedia||i.mozGetUserMedia||i.msGetUserMedia;return e?e.bind(i):e}(),Blob:e.Blob||e.BlobBuilder||e.WebKitBlobBuilder||e.MozBlobBuilder||e.MSBlobBuilder,btoa:function(){var t=e.btoa||function(e){for(var t,r,i,n,o,a,s,d="",c=0,l=e.length,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";l>c;)t=e.charCodeAt(c++),r=e.charCodeAt(c++),i=e.charCodeAt(c++),n=t>>2,o=(3&t)<<4|r>>4,a=(15&r)<<2|i>>6,s=63&i,isNaN(r)?a=s=64:isNaN(i)&&(s=64),d=d+u.charAt(n)+u.charAt(o)+u.charAt(a)+u.charAt(s);return d};return t?t.bind(e):function(){}}(),isObject:function(e){return e&&"[object Object]"===Object.prototype.toString.call(e)},isEmptyObject:function(e){return r.isObject(e)&&!Object.keys(e).length},isArray:function(e){return e&&Array.isArray(e)},isFunction:function(e){return e&&"function"==typeof e},isElement:function(e){return e&&1===e.nodeType},isString:function(e){return"string"==typeof e||"[object String]"===Object.prototype.toString.call(e)},isSupported:{canvas:function(){var e=t.createElement("canvas");return e&&e.getContext&&e.getContext("2d")},webworkers:function(){return e.Worker},blob:function(){return r.Blob},Uint8Array:function(){return e.Uint8Array},Uint32Array:function(){return e.Uint32Array},videoCodecs:function(){var e=t.createElement("video"),r={mp4:!1,h264:!1,ogv:!1,ogg:!1,webm:!1};return e&&e.canPlayType&&(r.mp4=""!==e.canPlayType('video/mp4; codecs="mp4v.20.8"'),r.h264=""!==(e.canPlayType('video/mp4; codecs="avc1.42E01E"')||e.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"')),r.ogv=""!==e.canPlayType('video/ogg; codecs="theora"'),r.ogg=""!==e.canPlayType('video/ogg; codecs="theora"'),r.webm=-1!==e.canPlayType('video/webm; codecs="vp8, vorbis"')),r}()},noop:function(){},each:function(e,t){var i,n;if(r.isArray(e))for(i=-1,n=e.length;++i<n&&t(i,e[i])!==!1;);else if(r.isObject(e))for(i in e)if(e.hasOwnProperty(i)&&t(i,e[i])===!1)break},mergeOptions:function n(e,t){if(r.isObject(e)&&r.isObject(t)&&Object.keys){var i={};return r.each(e,function(t){i[t]=e[t]}),r.each(t,function(o){var a=t[o];i[o]=r.isObject(a)?e[o]?n(e[o],a):a:a}),i}},setCSSAttr:function(e,t,i){r.isElement(e)&&(r.isString(t)&&r.isString(i)?e.style[t]=i:r.isObject(t)&&r.each(t,function(t,r){e.style[t]=r}))},removeElement:function(e){r.isElement(e)&&e.parentNode&&e.parentNode.removeChild(e)},createWebWorker:function(e){if(!r.isString(e))return{};try{var t=new r.Blob([e],{type:"text/javascript"}),i=r.URL.createObjectURL(t),n=new Worker(i);return{objectUrl:i,worker:n}}catch(o){return""+o}},getExtension:function(e){return e.substr(e.lastIndexOf(".")+1,e.length)},getFontSize:function(e){if(e=e||{},!t.body||e.resizeFont===!1)return e.fontSize;var r=e.text,i=e.gifWidth,n=parseInt(e.fontSize,10),o=parseInt(e.minFontSize,10),a=t.createElement("div"),s=t.createElement("span");for(a.setAttribute("width",i),a.appendChild(s),s.innerHTML=r,s.style.fontSize=n+"px",s.style.textIndent="-9999px",s.style.visibility="hidden",t.body.appendChild(s);s.offsetWidth>i&&n>=o;)s.style.fontSize=--n+"px";return t.body.removeChild(s),n+"px"},webWorkerError:!1};return r}(),a=function(e){var t={validate:function(r){r=e.isObject(r)?r:{};var i={};return e.each(t.validators,function(e,t){var n=t.errorCode;return r[n]||t.condition?void 0:(i=t,i.error=!0,!1)}),delete i.condition,i},isValid:function(e){var r=t.validate(e),i=r.error!==!0?!0:!1;return i},validators:[{condition:e.isFunction(e.getUserMedia),errorCode:"getUserMedia",errorMsg:"The getUserMedia API is not supported in your browser"},{condition:e.isSupported.canvas(),errorCode:"canvas",errorMsg:"Canvas elements are not supported in your browser"},{condition:e.isSupported.webworkers(),errorCode:"webworkers",errorMsg:"The Web Workers API is not supported in your browser"},{condition:e.isFunction(e.URL),errorCode:"window.URL",errorMsg:"The window.URL API is not supported in your browser"},{condition:e.isSupported.blob(),errorCode:"window.Blob",errorMsg:"The window.Blob File API is not supported in your browser"},{condition:e.isSupported.Uint8Array(),errorCode:"window.Uint8Array",errorMsg:"The window.Uint8Array function constructor is not supported in your browser"},{condition:e.isSupported.Uint32Array(),errorCode:"window.Uint32Array",errorMsg:"The window.Uint32Array function constructor is not supported in your browser"}],messages:{videoCodecs:{errorCode:"videocodec",errorMsg:"The video codec you are trying to use is not supported in your browser"}}};return t}(o),s={sampleInterval:10,numWorkers:2,gifWidth:200,gifHeight:200,interval:.1,numFrames:10,keepCameraOn:!1,images:[],video:null,webcamVideoElement:null,cameraStream:null,text:"",fontWeight:"normal",fontSize:"16px",minFontSize:"10px",resizeFont:!1,fontFamily:"sans-serif",fontColor:"#ffffff",textAlign:"center",textBaseline:"bottom",textXCoordinate:null,textYCoordinate:null,progressCallback:function(){},completeCallback:function(){},saveRenderingContexts:!1,savedRenderingContexts:[]},d=function(){return a.isValid()},c=function(){return a.isValid()},l=function(){var e={getUserMedia:!0};return a.isValid(e)},u=function(e){var t=!1;if(o.isArray(e)&&e.length){if(o.each(e,function(e,r){o.isSupported.videoCodecs[r]&&(t=!0)}),!t)return!1}else if(o.isString(e)&&e.length&&!o.isSupported.videoCodecs[e])return!1;return a.isValid({getUserMedia:!0})},m=function(){function e(){function e(e,t,r){var i,n;for(u=e,m=t,f=r,h=new Array(g),i=0;g>i;i++)h[i]=new Array(4),n=h[i],n[0]=n[1]=n[2]=(i<<S+8)/g|0,D[i]=F/g|0,G[i]=0}function t(){for(var e=[],t=new Array(g),r=0;g>r;r++)t[h[r][3]]=r;for(var i=0,n=0;g>n;n++){var o=t[n];e[i++]=h[o][0],e[i++]=h[o][1],e[i++]=h[o][2]}return e}function r(){var e,t,r,i,n,o,a,s;for(a=0,s=0,e=0;g>e;e++){for(n=h[e],r=e,i=n[1],t=e+1;g>t;t++)o=h[t],o[1]<i&&(r=t,i=o[1]);if(o=h[r],e!=r&&(t=o[0],o[0]=n[0],n[0]=t,t=o[1],o[1]=n[1],n[1]=t,t=o[2],o[2]=n[2],n[2]=t,t=o[3],o[3]=n[3],n[3]=t),i!=a){for(B[a]=s+e>>1,t=a+1;i>t;t++)B[t]=e;a=i,s=e}}for(B[a]=s+C>>1,t=a+1;256>t;t++)B[t]=C}function i(){var e,t,r,i,n,o,a,h,g,C,x,F,E,W;for(y>m&&(f=1),l=30+(f-1)/3,F=u,E=0,W=m,x=m/(3*f),C=x/k|0,h=j,o=R,a=o>>I,1>=a&&(a=0),e=0;a>e;e++)N[e]=h*((a*a-e*e)*L/(a*a));for(g=y>m?3:m%p!==0?3*p:m%v!==0?3*v:m%b!==0?3*b:3*w,e=0;x>e;)if(r=(255&F[E+0])<<S,i=(255&F[E+1])<<S,n=(255&F[E+2])<<S,t=c(r,i,n),d(h,t,r,i,n),0!==a&&s(a,t,r,i,n),E+=g,E>=W&&(E-=m),e++,0===C&&(C=1),e%C===0)for(h-=h/l,o-=o/V,a=o>>I,1>=a&&(a=0),t=0;a>t;t++)N[t]=h*((a*a-t*t)*L/(a*a))}function n(e,t,r){var i,n,o,a,s,d,c;for(s=1e3,c=-1,i=B[t],n=i-1;g>i||n>=0;)g>i&&(d=h[i],o=d[1]-t,o>=s?i=g:(i++,0>o&&(o=-o),a=d[0]-e,0>a&&(a=-a),o+=a,s>o&&(a=d[2]-r,0>a&&(a=-a),o+=a,s>o&&(s=o,c=d[3])))),n>=0&&(d=h[n],o=t-d[1],o>=s?n=-1:(n--,0>o&&(o=-o),a=d[0]-e,0>a&&(a=-a),o+=a,s>o&&(a=d[2]-r,0>a&&(a=-a),o+=a,s>o&&(s=o,c=d[3]))));return c}function o(){return i(),a(),r(),t()}function a(){var e;for(e=0;g>e;e++)h[e][0]>>=S,h[e][1]>>=S,h[e][2]>>=S,h[e][3]=e}function s(e,t,r,i,n){var o,a,s,d,c,l,u;for(s=t-e,-1>s&&(s=-1),d=t+e,d>g&&(d=g),o=t+1,a=t-1,l=1;d>o||a>s;){if(c=N[l++],d>o){u=h[o++];try{u[0]-=c*(u[0]-r)/H|0,u[1]-=c*(u[1]-i)/H|0,u[2]-=c*(u[2]-n)/H|0}catch(m){}}if(a>s){u=h[a--];try{u[0]-=c*(u[0]-r)/H|0,u[1]-=c*(u[1]-i)/H|0,u[2]-=c*(u[2]-n)/H|0}catch(m){}}}}function d(e,t,r,i,n){var o=h[t],a=e/j;o[0]-=a*(o[0]-r)|0,o[1]-=a*(o[1]-i)|0,o[2]-=a*(o[2]-n)|0}function c(e,t,r){var i,n,o,a,s,d,c,l,u,m;for(l=~(1<<31),u=l,d=-1,c=d,i=0;g>i;i++)m=h[i],n=m[0]-e,0>n&&(n=-n),o=m[1]-t,0>o&&(o=-o),n+=o,o=m[2]-r,0>o&&(o=-o),n+=o,l>n&&(l=n,d=i),a=n-(G[i]>>x-S),u>a&&(u=a,c=i),s=D[i]>>W,D[i]-=s,G[i]+=s<<E;return D[d]+=U,G[d]-=A,c}var l,u,m,f,h,g=256,p=499,v=491,b=487,w=503,y=3*w,C=g-1,S=4,k=100,x=16,F=1<<x,E=10,W=10,U=F>>W,A=F<<E-W,O=g>>3,I=6,M=1<<I,R=O*M,V=30,T=10,j=1<<T,z=8,L=1<<z,P=T+z,H=1<<P,B=[],G=[],D=[],N=[];e.apply(this,arguments);var X={};return X.map=n,X.process=o,X
}return e}(),f=function(e){var t=function(){try{self.onmessage=function(e){var t=e.data,r=i.run(t);t&&t.gifshot&&postMessage(r)}}catch(t){}var i={dataToRGB:function(e,t,r){for(var i=0,n=t*r*4,o=[];n>i;)o.push(e[i++]),o.push(e[i++]),o.push(e[i++]),i++;return o},componentizedPaletteToArray:function(e){var t,r,i,n,o=[];for(t=0;t<e.length;t+=3)r=e[t],i=e[t+1],n=e[t+2],o.push(r<<16|i<<8|n);return o},processFrameWithQuantizer:function(t,i,n,o){var a,s=this.dataToRGB(t,i,n),d=new e(s,s.length,o),c=d.process(),l=new Uint32Array(this.componentizedPaletteToArray(c)),u=i*n,m=new Uint8Array(u),f=0;for(a=0;u>a;a++)r=s[f++],g=s[f++],b=s[f++],m[a]=d.map(r,g,b);return{pixels:m,palette:l}},run:function(e){var t=e.width,r=e.height,i=e.data,n=(e.palette,e.sampleInterval);return this.processFrameWithQuantizer(i,t,r,n)}};return i};return t}(m),h=function(e,t,r,i){function o(e){var t=e.length;if(2>t||t>256||t&t-1)throw"Invalid code/color length, must be power of 2 and 2 .. 256.";return t}function a(e,t,r,i){function o(r){for(;f>=r;)e[t++]=255&h,h>>=8,f-=8,t===s+256&&(e[s]=255,s=t++)}function a(e){h|=e<<f,f+=m,o(8)}e[t++]=r;var s=t++,d=1<<r,c=d-1,l=d+1,u=l+1,m=r+1,f=0,h=0,g=i[0]&c,p={};a(d);for(var v=1,b=i.length;b>v;++v){var w=i[v]&c,y=g<<8|w,C=p[y];if(C===n){for(h|=g<<f,f+=m;f>=8;)e[t++]=255&h,h>>=8,f-=8,t===s+256&&(e[s]=255,s=t++);4096===u?(a(d),u=l+1,m=r+1,p={}):(u>=1<<m&&++m,p[y]=u++),g=w}else g=C}return a(g),a(l),o(1),s+1===t?e[s]=0:(e[s]=t-s-1,e[t++]=0),t}var s=0;i=i===n?{}:i;var d=i.loop===n?null:i.loop,c=i.palette===n?null:i.palette;if(0>=t||0>=r||t>65535||r>65535)throw"Width/Height invalid.";e[s++]=71,e[s++]=73,e[s++]=70,e[s++]=56,e[s++]=57,e[s++]=97;var l=0,u=0;if(e[s++]=255&t,e[s++]=t>>8&255,e[s++]=255&r,e[s++]=r>>8&255,e[s++]=(null!==c?128:0)|l,e[s++]=u,e[s++]=0,null!==d){if(0>d||d>65535)throw"Loop count invalid.";e[s++]=33,e[s++]=255,e[s++]=11,e[s++]=78,e[s++]=69,e[s++]=84,e[s++]=83,e[s++]=67,e[s++]=65,e[s++]=80,e[s++]=69,e[s++]=50,e[s++]=46,e[s++]=48,e[s++]=3,e[s++]=1,e[s++]=255&d,e[s++]=d>>8&255,e[s++]=0}var m=!1;this.addFrame=function(t,r,i,d,l,u){if(m===!0&&(--s,m=!1),u=u===n?{}:u,0>t||0>r||t>65535||r>65535)throw"x/y invalid.";if(0>=i||0>=d||i>65535||d>65535)throw"Width/Height invalid.";if(l.length<i*d)throw"Not enough pixels for the frame size.";var f=!0,h=u.palette;if((h===n||null===h)&&(f=!1,h=c),h===n||null===h)throw"Must supply either a local or global palette.";for(var g=o(h),p=0;g>>=1;)++p;g=1<<p;var v=u.delay===n?0:u.delay,b=u.disposal===n?0:u.disposal;if(0>b||b>3)throw"Disposal out of range.";var w=!1,y=0;if(u.transparent!==n&&null!==u.transparent&&(w=!0,y=u.transparent,0>y||y>=g))throw"Transparent color index.";if((0!==b||w||0!==v)&&(e[s++]=33,e[s++]=249,e[s++]=4,e[s++]=b<<2|(w===!0?1:0),e[s++]=255&v,e[s++]=v>>8&255,e[s++]=y,e[s++]=0),e[s++]=44,e[s++]=255&t,e[s++]=t>>8&255,e[s++]=255&r,e[s++]=r>>8&255,e[s++]=255&i,e[s++]=i>>8&255,e[s++]=255&d,e[s++]=d>>8&255,e[s++]=f===!0?128|p-1:0,f===!0)for(var C=0,S=h.length;S>C;++C){var k=h[C];e[s++]=k>>16&255,e[s++]=k>>8&255,e[s++]=255&k}s=a(e,s,2>p?2:p,l)},this.end=function(){return m===!1&&(e[s++]=59,m=!0),s}},p=function(e,r,i,n){var o=function(t){t=e.isObject(t)?t:{},this.canvas=null,this.ctx=null,this.repeat=0,this.frames=[],this.numRenderedFrames=0,this.onRenderCompleteCallback=e.noop,this.onRenderProgressCallback=e.noop,this.workers=[],this.availableWorkers=[],this.generatingGIF=!1,this.options=t=e.mergeOptions(this.defaultOptions,t),this.initializeWebWorkers(t)};return o.prototype={defaultOptions:{width:160,height:120,delay:250,palette:null,sampleInterval:10,numWorkers:2},workerMethods:r(),initializeWebWorkers:function(n){var o,a,s,d,c=i.toString()+"("+r.toString()+"());",l=-1,u="";for(d=n.numWorkers;++l<d;)o=e.createWebWorker(c),e.isObject(o)?(a=o.objectUrl,s=o.worker,this.workers.push({worker:s,objectUrl:a}),this.availableWorkers.push(s)):(u=o,e.webWorkerError=!!o);this.workerError=u,this.canvas=t.createElement("canvas"),this.canvas.width=n.width,this.canvas.height=n.height,this.ctx=this.canvas.getContext("2d"),this.options.delay=.1*this.options.delay,this.frames=[]},getWorker:function(){return this.availableWorkers.pop()},freeWorker:function(e){this.availableWorkers.push(e)},byteMap:function(){for(var e=[],t=0;256>t;t++)e[t]=String.fromCharCode(t);return e}(),bufferToString:function(e){for(var t=e.length,r="",i=-1;++i<t;)r+=this.byteMap[e[i]];return r},onFrameFinished:function(){var e=this,t=this.frames,r=t.every(function(e){return!e.beingProcessed&&e.done});this.numRenderedFrames++,this.onRenderProgressCallback(.75*this.numRenderedFrames/t.length),r?this.generatingGIF||this.generateGIF(t,this.onRenderCompleteCallback):setTimeout(function(){e.processNextFrame()},1)},processFrame:function(e){var t,r,i=this,n=this.options,o=n.sampleInterval,a=this.frames,s=function(e){var n=e.data;delete t.data,t.pixels=Array.prototype.slice.call(n.pixels),t.palette=Array.prototype.slice.call(n.palette),t.done=!0,t.beingProcessed=!1,i.freeWorker(r),i.onFrameFinished()};return t=a[e],t.beingProcessed||t.done?(this.onFrameFinished(),void 0):(t.sampleInterval=o,t.beingProcessed=!0,t.gifshot=!0,r=this.getWorker(),r?(r.onmessage=s,r.postMessage(t)):s({data:i.workerMethods.run(t)}),void 0)},startRendering:function(e){this.onRenderCompleteCallback=e;for(var t=0;t<this.options.numWorkers&&t<this.frames.length;t++)this.processFrame(t)},processNextFrame:function(){for(var e=-1,t=0;t<this.frames.length;t++){var r=this.frames[t];if(!r.done&&!r.beingProcessed){e=t;break}}e>=0&&this.processFrame(e)},generateGIF:function(t,r){var i,o,a=[],s={loop:this.repeat},d=this.options,c=d.height,l=d.width,u=new n(a,l,c,s),m=this.onRenderProgressCallback,f=d.delay;this.generatingGIF=!0,e.each(t,function(e,r){var i=r.palette;m(.75+.25*r.position*1/t.length),u.addFrame(0,0,l,c,r.pixels,{palette:i,delay:f})}),u.end(),m(1),this.frames=[],this.generatingGIF=!1,e.isFunction(r)&&(i=this.bufferToString(a),o="data:image/gif;base64,"+e.btoa(i),r(o))},setRepeat:function(e){this.repeat=e},addFrame:function(t,r,i){i=e.isObject(i)?i:{};var n,o=this,a=this.ctx,s=this.options,d=s.width,c=s.height,l=(i.gifHeight,i.gifWidth,i.text),u=i.fontWeight,m=e.getFontSize(i),f=i.fontFamily,h=i.fontColor,g=i.textAlign,p=i.textBaseline,v=i.textXCoordinate?i.textXCoordinate:"left"===g?1:"right"===g?d:d/2,b=i.textYCoordinate?i.textYCoordinate:"top"===p?1:"center"===p?c/2:c,w=u+" "+m+" "+f;try{r&&(t.src=r),a.drawImage(t,0,0,d,c),l&&(a.font=w,a.fillStyle=h,a.textAlign=g,a.textBaseline=p,a.fillText(l,v,b)),n=a.getImageData(0,0,d,c),o.addFrameImageData(n)}catch(y){return""+y}},addFrameImageData:function(e){var t=this.frames,r=e.data;this.frames.push({data:r,width:e.width,height:e.height,palette:null,dithering:null,done:!1,beingProcessed:!1,position:t.length})},onRenderProgress:function(e){this.onRenderProgressCallback=e},isRendering:function(){return this.generatingGIF},getBase64GIF:function(e){var t=this,r=function(r){t.destroyWorkers(),setTimeout(function(){e(r)},0)};this.startRendering(r)},destroyWorkers:function(){if(!this.workerError){var t=this.workers;e.each(t,function(t,r){var i=r.worker,n=r.objectUrl;i.terminate(),e.URL.revokeObjectURL(n)})}}},o}(o,f,m,h),v=function(e,t){e.getBase64GIF(function(e){t({error:!1,errorCode:"",errorMsg:"",image:e})})},w=function(e){var r,i,n=e.images,s=e.imagesLength,d=e.callback,c=e.options,l={getUserMedia:!0,"window.URL":!0},u=a.validate(l),m=0;return u.error?d(u):(i=new p(c),o.each(n,function(e,n){o.isElement(n)?(n.crossOrigin="Anonymous",i.addFrame(n,n.src,c),m+=1,m===s&&v(i,d)):o.isString(n)&&(r=t.createElement("img"),r.crossOrigin="Anonymous",r.onerror=function(){s>0&&(s-=1)},r.src=n,o.setCSSAttr(r,{position:"fixed",opacity:"0"}),function(e,t,r){e.onload=function(){t.addFrame(e,r,c),o.removeElement(e),m+=1,m===s&&v(t,d)}}(r,i,n),t.body.appendChild(r))}),void 0)},y={getWebcamGIF:function(e,r){r=o.isFunction(r)?r:function(){};var i,a=t.createElement("canvas"),s=e.videoElement,d=e.keepCameraOn,c=e.webcamVideoElement,l=e.cameraStream,u=e.gifWidth,m=e.gifHeight,f=e.videoWidth,h=e.videoHeight,g=e.sampleInterval,v=e.numWorkers,b=e.crop,w=e.interval,y=e.progressCallback,C=e.savedRenderingContexts,S=e.saveRenderingContexts,k=[],x=C.length?C.length:e.numFrames,F=x,E=new p({sampleInterval:g,numWorkers:v,width:u,height:m,delay:w}),W=e.text,U=e.fontWeight,A=o.getFontSize(e),O=e.fontFamily,I=e.fontColor,M=e.textAlign,R=e.textBaseline,V=e.textXCoordinate?e.textXCoordinate:"left"===M?1:"right"===M?u:u/2,T=e.textYCoordinate?e.textYCoordinate:"top"===R?1:"center"===R?m/2:m,j=U+" "+A+" "+O,z=b?Math.floor(b.scaledWidth/2):0,L=b?f-b.scaledWidth:0,P=b?Math.floor(b.scaledHeight/2):0,H=b?h-b.scaledHeight:0,B=function(){var e=F-1;C.length?i.putImageData(C[x-F],0,0):i.drawImage(s,z,P,L,H,0,0,u,m),S&&k.push(i.getImageData(0,0,u,m)),W&&(i.font=j,i.fillStyle=I,i.textAlign=M,i.textBaseline=R,i.fillText(W,V,T)),E.addFrameImageData(i.getImageData(0,0,u,m)),F=e,y((x-F)/x),e>0&&setTimeout(B,1e3*w),F||E.getBase64GIF(function(e){r({error:!1,errorCode:"",errorMsg:"",image:e,cameraStream:l,videoElement:s,webcamVideoElement:c,savedRenderingContexts:k,keepCameraOn:d})})};x=x!==n?x:10,w=w!==n?w:.1,a.width=u,a.height=m,i=a.getContext("2d"),B()},getCropDimensions:function(e){var t=e.videoWidth,r=e.videoHeight,i=e.gifWidth,n=e.gifHeight,o={width:0,height:0,scaledWidth:0,scaledHeight:0};return t>r?(o.width=Math.round(t*(n/r))-i,o.scaledWidth=Math.round(o.width*(r/n))):(o.height=Math.round(r*(i/t))-n,o.scaledHeight=Math.round(o.height*(t/i))),o}},C={loadedData:!1,defaultVideoDimensions:{width:640,height:480},findVideoSize:function A(e){A.attempts=A.attempts||0;var t=this,r=e.videoElement,i=e.cameraStream,n=e.completedCallback;r&&(r.videoWidth>0&&r.videoHeight>0?(r.removeEventListener("loadeddata",t.findVideoSize),n({videoElement:r,cameraStream:i,videoWidth:r.videoWidth,videoHeight:r.videoHeight})):A.attempts<10?(A.attempts+=1,setTimeout(function(){t.findVideoSize(e)},200)):n({videoElement:r,cameraStream:i,videoWidth:t.defaultVideoDimensions.width,videoHeight:t.defaultVideoDimensions.height}))},onStreamingTimeout:function(e){o.isFunction(e)&&e({error:!0,errorCode:"getUserMedia",errorMsg:"There was an issue with the getUserMedia API - Timed out while trying to start streaming",image:null,cameraStream:{}})},stream:function(e){var t=this,r=o.isArray(e.existingVideo)?e.existingVideo[0]:e.existingVideo,i=e.videoElement,n=e.cameraStream,a=e.streamedCallback,s=e.completedCallback;o.isFunction(a)&&a(),r?o.isString(r)&&(i.src=r,i.innerHTML='<source src="'+r+'" type="video/'+o.getExtension(r)+'" />'):i.mozSrcObject?i.mozSrcObject=n:o.URL&&(i.src=o.URL.createObjectURL(n)),i.play(),setTimeout(function d(){d.count=d.count||0,t.loadedData===!0?(t.findVideoSize({videoElement:i,cameraStream:n,completedCallback:s}),t.loadedData=!1):(d.count+=1,d.count>10?t.findVideoSize({videoElement:i,cameraStream:n,completedCallback:s}):d())},100)},startStreaming:function(e){var r=this,i=o.isFunction(e.error)?e.error:o.noop,n=o.isFunction(e.streamed)?e.streamed:o.noop,a=o.isFunction(e.completed)?e.completed:o.noop,s=e.existingVideo,d=e.webcamVideoElement,c=o.isElement(s)?s:d?d:t.createElement("video"),l=e.lastCameraStream;c.crossOrigin="Anonymous",c.autoplay=!0,c.loop=!0,c.muted=!0,c.addEventListener("loadeddata",function(){r.loadedData=!0}),s?r.stream({videoElement:c,existingVideo:s,completedCallback:a}):l?r.stream({videoElement:c,cameraStream:l,streamedCallback:n,completedCallback:a}):o.getUserMedia({video:!0},function(e){r.stream({videoElement:c,cameraStream:e,streamedCallback:n,completedCallback:a})},i)},startVideoStreaming:function(e,t){t=t||{};var r,i=this,o=t.timeout!==n?t.timeout:0,a=t.callback,s=t.webcamVideoElement;o>0&&(r=setTimeout(function(){i.onStreamingTimeout(a)},1e4)),this.startStreaming({error:function(){a({error:!0,errorCode:"getUserMedia",errorMsg:"There was an issue with the getUserMedia API - the user probably denied permission",image:null,cameraStream:{}})},streamed:function(){clearTimeout(r)},completed:function(t){var r=t.cameraStream,i=t.videoElement,n=t.videoWidth,o=t.videoHeight;e({cameraStream:r,videoElement:i,videoWidth:n,videoHeight:o})},lastCameraStream:t.lastCameraStream,webcamVideoElement:s})},stopVideoStreaming:function(e){e=o.isObject(e)?e:{};var t=e.cameraStream,r=e.videoElement,i=e.keepCameraOn,n=e.webcamVideoElement;!i&&t&&o.isFunction(t.stop)&&t.stop(),o.isElement(r)&&!n&&(r.pause(),o.isFunction(o.URL.revokeObjectURL)&&!o.webWorkerError&&r.src&&o.URL.revokeObjectURL(r.src),o.removeElement(r))}},S=function(e){e=o.isObject(e)?e:{};var t=(o.isObject(e.options)?e.options:{},e.cameraStream),r=e.videoElement,i=e.webcamVideoElement,n=e.keepCameraOn;C.stopVideoStreaming({cameraStream:t,videoElement:r,keepCameraOn:n,webcamVideoElement:i})},k=function(e,r){var i=e.options||{},n=i.images,a=i.video,s=(i.numFrames,i.interval),d=i.video?0:1e4*s,c=e.cameraStream,l=e.videoElement,u=e.videoWidth,m=e.videoHeight,f=i.gifWidth,h=i.gifHeight,g=y.getCropDimensions({videoWidth:u,videoHeight:m,gifHeight:h,gifWidth:f}),p=r;i.crop=g,i.videoElement=l,i.videoWidth=u,i.videoHeight=m,i.cameraStream=c,o.isElement(l)&&(l.width=f+g.width,l.height=h+g.height,i.webcamVideoElement||(o.setCSSAttr(l,{position:"fixed",opacity:"0"}),t.body.appendChild(l)),l.play(),setTimeout(function(){y.getWebcamGIF(i,function(e){n&&n.length||a&&a.length||S(e),p(e)})},d))},x=function(e){var t,r,i=e.existingVideo,n=e.callback,s=e.options,d={getUserMedia:!0,"window.URL":!0},c=a.validate(d);if(c.error)return n(c);if(o.isElement(i)&&i.src){if(r=i.src,t=o.getExtension(r),!o.isSupported.videoCodecs[t])return n(a.messages.videoCodecs)}else o.isArray(i)&&o.each(i,function(e,r){return t=r.substr(r.lastIndexOf(".")+1,r.length),o.isSupported.videoCodecs[t]?(i=r,!1):void 0});C.startStreaming({completed:function(e){e.options=s||{},k(e,n)},existingVideo:i})},F=function(e){var t=e.lastCameraStream,r=e.callback,i=e.webcamVideoElement,n=e.options;return c()?n.savedRenderingContexts.length?(y.getWebcamGIF(n,function(e){r(e)}),void 0):(C.startVideoStreaming(function(e){e.options=n||{},k(e,r)},{lastCameraStream:t,callback:r,webcamVideoElement:i}),void 0):r(a.validate())},E=function(e,t){if(t=o.isFunction(e)?e:t,e=o.isObject(e)?e:{},o.isFunction(t)){var r=o.mergeOptions(s,e)||{},i=e.cameraStream,n=r.images,a=n?n.length:0,d=r.video,c=r.webcamVideoElement;a?w({images:n,imagesLength:a,callback:t,options:r}):d?x({existingVideo:d,callback:t,options:r}):F({lastCameraStream:i,callback:t,webcamVideoElement:c,options:r})}},W=function(e,t){if(t=o.isFunction(e)?e:t,e=o.isObject(e)?e:{},o.isFunction(t)){var r=o.mergeOptions(s,e),i=o.mergeOptions(r,{interval:.1,numFrames:1});E(i,t)}},U=function(e,t,r,i,n,o,a,s,d,c){var l={utils:e,error:t,defaultOptions:r,createGIF:s,takeSnapShot:d,stopVideoStreaming:c,isSupported:i,isWebCamGIFSupported:n,isExistingVideoGIFSupported:a,isExistingImagesGIFSupported:o,VERSION:"0.0.1"};return l}(o,a,s,d,c,l,u,E,W,S),function(t){"function"==typeof define&&define.amd?define([],function(){return t}):"undefined"!=typeof exports?module.exports=t:e.gifshot=t}(U)}("undefined"!=typeof window?window:{},"undefined"!=typeof document?document:{createElement:function(){}},"undefined"!=typeof window?window.navigator:{})},{}],6:[function(require,module){module.exports=function(){"use strict";return function(e){function n(){this._pieces=[],this._parts=[]}function r(e){this.index=0,this.dataBuffer=e,this.dataView=new Uint8Array(this.dataBuffer),this.length=this.dataBuffer.byteLength}function i(){this.bufferBuilder=new n}function s(e){var t=e.charCodeAt(0);return 2047>=t?"00":65535>=t?"000":2097151>=t?"0000":67108863>=t?"00000":"000000"}function o(e){return e.length>600?new Blob([e]).size:e.replace(/[^\u0000-\u007F]/g,s).length}function u(){this._events={}}function f(e,t){return this instanceof f?(this._dc=e,h.debug=t,this._outgoing={},this._incoming={},this._received={},this._window=1e3,this._mtu=500,this._interval=0,this._count=0,this._queue=[],this._setupDC(),void 0):new f(e)}function p(e,t){return this instanceof p?(u.call(this),e&&e.constructor==Object?(t=e,e=void 0):e&&(e=e.toString()),t=h.extend({debug:0,host:h.CLOUD_HOST,port:h.CLOUD_PORT,key:"peerjs",path:"/",token:h.randomToken(),config:h.defaultConfig},t),this.options=t,"/"===t.host&&(t.host=window.location.hostname),"/"!==t.path[0]&&(t.path="/"+t.path),"/"!==t.path[t.path.length-1]&&(t.path+="/"),void 0===t.secure&&t.host!==h.CLOUD_HOST&&(t.secure=h.isSecure()),t.logFunction&&h.setLogFunction(t.logFunction),h.setLogLevel(t.debug),h.supports.audioVideo||h.supports.data?h.validateId(e)?h.validateKey(t.key)?t.secure&&"0.peerjs.com"===t.host?(this._delayedAbort("ssl-unavailable","The cloud server currently does not support HTTPS. Please run your own PeerServer to use HTTPS."),void 0):(this.destroyed=!1,this.disconnected=!1,this.open=!1,this.connections={},this._lostMessages={},this._initializeServerConnection(),e?this._initialize(e):this._retrieveId(),void 0):(this._delayedAbort("invalid-key",'API KEY "'+t.key+'" is invalid'),void 0):(this._delayedAbort("invalid-id",'ID "'+e+'" is invalid'),void 0):(this._delayedAbort("browser-incompatible","The current browser does not support WebRTC"),void 0)):new p(e,t)}function d(e,t,n){return this instanceof d?(u.call(this),this.options=h.extend({serialization:"binary",reliable:!1},n),this.open=!1,this.type="data",this.peer=e,this.provider=t,this.id=this.options.connectionId||d._idPrefix+h.randomToken(),this.label=this.options.label||this.id,this.metadata=this.options.metadata,this.serialization=this.options.serialization,this.reliable=this.options.reliable,this._buffer=[],this._buffering=!1,this.bufferSize=0,this._chunkedData={},this.options._payload&&(this._peerBrowser=this.options._payload.browser),m.startConnection(this,this.options._payload||{originator:!0}),void 0):new d(e,t,n)}function v(e,t,n){return this instanceof v?(u.call(this),this.options=h.extend({},n),this.open=!1,this.type="media",this.peer=e,this.provider=t,this.metadata=this.options.metadata,this.localStream=this.options._stream,this.id=this.options.connectionId||v._idPrefix+h.randomToken(),this.localStream&&m.startConnection(this,{_stream:this.localStream,originator:!0}),void 0):new v(e,t,n)}function g(e,t,n,r,i){if(!(this instanceof g))return new g(e,t,n,r,i);u.call(this),this.disconnected=!1,this._queue=[];var s=e?"https://":"http://",o=e?"wss://":"ws://";this._httpUrl=s+t+":"+n+r+i,this._wsUrl=o+t+":"+n+r+"peerjs?key="+i}var t={};t.useBlobBuilder=function(){try{return new Blob([]),!1}catch(e){return!0}}(),t.useArrayBufferView=!t.useBlobBuilder&&function(){try{return 0===new Blob([new Uint8Array([])]).size}catch(e){return!0}}(),e.binaryFeatures=t,e.BlobBuilder=window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder||window.BlobBuilder,n.prototype.append=function(e){"number"==typeof e?this._pieces.push(e):(this.flush(),this._parts.push(e))},n.prototype.flush=function(){if(this._pieces.length>0){var e=new Uint8Array(this._pieces);t.useArrayBufferView||(e=e.buffer),this._parts.push(e),this._pieces=[]}},n.prototype.getBuffer=function(){if(this.flush(),t.useBlobBuilder){for(var e=new BlobBuilder,n=0,r=this._parts.length;r>n;n++)e.append(this._parts[n]);return e.getBlob()}return new Blob(this._parts)},e.BinaryPack={unpack:function(e){var t=new r(e);return t.unpack()},pack:function(e){var t=new i;t.pack(e);var n=t.getBuffer();return n}},r.prototype.unpack=function(){var e=this.unpack_uint8();if(128>e){var t=e;return t}if(32>(224^e)){var n=(224^e)-32;return n}var r;if((r=160^e)<=15)return this.unpack_raw(r);if((r=176^e)<=15)return this.unpack_string(r);if((r=144^e)<=15)return this.unpack_array(r);if((r=128^e)<=15)return this.unpack_map(r);switch(e){case 192:return null;case 193:return void 0;case 194:return!1;case 195:return!0;case 202:return this.unpack_float();case 203:return this.unpack_double();case 204:return this.unpack_uint8();case 205:return this.unpack_uint16();case 206:return this.unpack_uint32();case 207:return this.unpack_uint64();case 208:return this.unpack_int8();case 209:return this.unpack_int16();case 210:return this.unpack_int32();case 211:return this.unpack_int64();case 212:return void 0;case 213:return void 0;case 214:return void 0;case 215:return void 0;case 216:return r=this.unpack_uint16(),this.unpack_string(r);case 217:return r=this.unpack_uint32(),this.unpack_string(r);case 218:return r=this.unpack_uint16(),this.unpack_raw(r);case 219:return r=this.unpack_uint32(),this.unpack_raw(r);case 220:return r=this.unpack_uint16(),this.unpack_array(r);case 221:return r=this.unpack_uint32(),this.unpack_array(r);case 222:return r=this.unpack_uint16(),this.unpack_map(r);case 223:return r=this.unpack_uint32(),this.unpack_map(r)}},r.prototype.unpack_uint8=function(){var e=255&this.dataView[this.index];return this.index++,e},r.prototype.unpack_uint16=function(){var e=this.read(2),t=256*(255&e[0])+(255&e[1]);return this.index+=2,t},r.prototype.unpack_uint32=function(){var e=this.read(4),t=256*(256*(256*e[0]+e[1])+e[2])+e[3];return this.index+=4,t},r.prototype.unpack_uint64=function(){var e=this.read(8),t=256*(256*(256*(256*(256*(256*(256*e[0]+e[1])+e[2])+e[3])+e[4])+e[5])+e[6])+e[7];return this.index+=8,t},r.prototype.unpack_int8=function(){var e=this.unpack_uint8();return 128>e?e:e-256},r.prototype.unpack_int16=function(){var e=this.unpack_uint16();return 32768>e?e:e-65536},r.prototype.unpack_int32=function(){var e=this.unpack_uint32();return e<Math.pow(2,31)?e:e-Math.pow(2,32)},r.prototype.unpack_int64=function(){var e=this.unpack_uint64();return e<Math.pow(2,63)?e:e-Math.pow(2,64)},r.prototype.unpack_raw=function(e){if(this.length<this.index+e)throw new Error("BinaryPackFailure: index is out of range "+this.index+" "+e+" "+this.length);var t=this.dataBuffer.slice(this.index,this.index+e);return this.index+=e,t},r.prototype.unpack_string=function(e){for(var i,s,t=this.read(e),n=0,r="";e>n;)i=t[n],128>i?(r+=String.fromCharCode(i),n++):32>(192^i)?(s=(192^i)<<6|63&t[n+1],r+=String.fromCharCode(s),n+=2):(s=(15&i)<<12|(63&t[n+1])<<6|63&t[n+2],r+=String.fromCharCode(s),n+=3);return this.index+=e,r},r.prototype.unpack_array=function(e){for(var t=new Array(e),n=0;e>n;n++)t[n]=this.unpack();return t},r.prototype.unpack_map=function(e){for(var t={},n=0;e>n;n++){var r=this.unpack(),i=this.unpack();t[r]=i}return t},r.prototype.unpack_float=function(){var e=this.unpack_uint32(),t=e>>31,n=(e>>23&255)-127,r=8388607&e|8388608;return(0==t?1:-1)*r*Math.pow(2,n-23)},r.prototype.unpack_double=function(){var e=this.unpack_uint32(),t=this.unpack_uint32(),n=e>>31,r=(e>>20&2047)-1023,i=1048575&e|1048576,s=i*Math.pow(2,r-20)+t*Math.pow(2,r-52);return(0==n?1:-1)*s},r.prototype.read=function(e){var t=this.index;if(t+e<=this.length)return this.dataView.subarray(t,t+e);throw new Error("BinaryPackFailure: read index out of range")},i.prototype.getBuffer=function(){return this.bufferBuilder.getBuffer()},i.prototype.pack=function(e){var n=typeof e;if("string"==n)this.pack_string(e);else if("number"==n)Math.floor(e)===e?this.pack_integer(e):this.pack_double(e);else if("boolean"==n)e===!0?this.bufferBuilder.append(195):e===!1&&this.bufferBuilder.append(194);else if("undefined"==n)this.bufferBuilder.append(192);else{if("object"!=n)throw new Error('Type "'+n+'" not yet supported');if(null===e)this.bufferBuilder.append(192);else{var r=e.constructor;if(r==Array)this.pack_array(e);else if(r==Blob||r==File)this.pack_bin(e);else if(r==ArrayBuffer)t.useArrayBufferView?this.pack_bin(new Uint8Array(e)):this.pack_bin(e);else if("BYTES_PER_ELEMENT"in e)t.useArrayBufferView?this.pack_bin(new Uint8Array(e.buffer)):this.pack_bin(e.buffer);else if(r==Object)this.pack_object(e);else if(r==Date)this.pack_string(e.toString());else{if("function"!=typeof e.toBinaryPack)throw new Error('Type "'+r.toString()+'" not yet supported');this.bufferBuilder.append(e.toBinaryPack())}}}this.bufferBuilder.flush()},i.prototype.pack_bin=function(e){var t=e.length||e.byteLength||e.size;if(15>=t)this.pack_uint8(160+t);else if(65535>=t)this.bufferBuilder.append(218),this.pack_uint16(t);else{if(!(4294967295>=t))throw new Error("Invalid length");this.bufferBuilder.append(219),this.pack_uint32(t)}this.bufferBuilder.append(e)},i.prototype.pack_string=function(e){var t=o(e);if(15>=t)this.pack_uint8(176+t);else if(65535>=t)this.bufferBuilder.append(216),this.pack_uint16(t);else{if(!(4294967295>=t))throw new Error("Invalid length");this.bufferBuilder.append(217),this.pack_uint32(t)}this.bufferBuilder.append(e)},i.prototype.pack_array=function(e){var t=e.length;if(15>=t)this.pack_uint8(144+t);else if(65535>=t)this.bufferBuilder.append(220),this.pack_uint16(t);else{if(!(4294967295>=t))throw new Error("Invalid length");this.bufferBuilder.append(221),this.pack_uint32(t)}for(var n=0;t>n;n++)this.pack(e[n])},i.prototype.pack_integer=function(e){if(e>=-32&&127>=e)this.bufferBuilder.append(255&e);else if(e>=0&&255>=e)this.bufferBuilder.append(204),this.pack_uint8(e);else if(e>=-128&&127>=e)this.bufferBuilder.append(208),this.pack_int8(e);else if(e>=0&&65535>=e)this.bufferBuilder.append(205),this.pack_uint16(e);else if(e>=-32768&&32767>=e)this.bufferBuilder.append(209),this.pack_int16(e);else if(e>=0&&4294967295>=e)this.bufferBuilder.append(206),this.pack_uint32(e);else if(e>=-2147483648&&2147483647>=e)this.bufferBuilder.append(210),this.pack_int32(e);else if(e>=-0x8000000000000000&&0x8000000000000000>=e)this.bufferBuilder.append(211),this.pack_int64(e);else{if(!(e>=0&&0x10000000000000000>=e))throw new Error("Invalid integer");this.bufferBuilder.append(207),this.pack_uint64(e)}},i.prototype.pack_double=function(e){var t=0;0>e&&(t=1,e=-e);var n=Math.floor(Math.log(e)/Math.LN2),r=e/Math.pow(2,n)-1,i=Math.floor(r*Math.pow(2,52)),s=Math.pow(2,32),o=t<<31|n+1023<<20|i/s&1048575,u=i%s;this.bufferBuilder.append(203),this.pack_int32(o),this.pack_int32(u)},i.prototype.pack_object=function(e){var t=Object.keys(e),n=t.length;if(15>=n)this.pack_uint8(128+n);else if(65535>=n)this.bufferBuilder.append(222),this.pack_uint16(n);else{if(!(4294967295>=n))throw new Error("Invalid length");this.bufferBuilder.append(223),this.pack_uint32(n)}for(var r in e)e.hasOwnProperty(r)&&(this.pack(r),this.pack(e[r]))},i.prototype.pack_uint8=function(e){this.bufferBuilder.append(e)},i.prototype.pack_uint16=function(e){this.bufferBuilder.append(e>>8),this.bufferBuilder.append(255&e)},i.prototype.pack_uint32=function(e){var t=4294967295&e;this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t)},i.prototype.pack_uint64=function(e){var t=e/Math.pow(2,32),n=e%Math.pow(2,32);this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)},i.prototype.pack_int8=function(e){this.bufferBuilder.append(255&e)},i.prototype.pack_int16=function(e){this.bufferBuilder.append((65280&e)>>8),this.bufferBuilder.append(255&e)},i.prototype.pack_int32=function(e){this.bufferBuilder.append(e>>>24&255),this.bufferBuilder.append((16711680&e)>>>16),this.bufferBuilder.append((65280&e)>>>8),this.bufferBuilder.append(255&e)},i.prototype.pack_int64=function(e){var t=Math.floor(e/Math.pow(2,32)),n=e%Math.pow(2,32);this.bufferBuilder.append((4278190080&t)>>>24),this.bufferBuilder.append((16711680&t)>>>16),this.bufferBuilder.append((65280&t)>>>8),this.bufferBuilder.append(255&t),this.bufferBuilder.append((4278190080&n)>>>24),this.bufferBuilder.append((16711680&n)>>>16),this.bufferBuilder.append((65280&n)>>>8),this.bufferBuilder.append(255&n)};var a=Array.isArray;u.prototype.addListener=function(e,t){if("function"!=typeof t)throw new Error("addListener only takes instances of Function");return this.emit("newListener",e,"function"==typeof t.listener?t.listener:t),this._events[e]?a(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,this},u.prototype.on=u.prototype.addListener,u.prototype.once=function(e,t){function i(){r.removeListener(e,i),t.apply(this,arguments)}if("function"!=typeof t)throw new Error(".once only takes instances of Function");var r=this;return i.listener=t,r.on(e,i),this},u.prototype.removeListener=function(e,t){if("function"!=typeof t)throw new Error("removeListener only takes instances of Function");if(!this._events[e])return this;var r=this._events[e];if(a(r)){for(var i=-1,s=0,o=r.length;o>s;s++)if(r[s]===t||r[s].listener&&r[s].listener===t){i=s;break}if(0>i)return this;r.splice(i,1),0==r.length&&delete this._events[e]}else(r===t||r.listener&&r.listener===t)&&delete this._events[e];return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){return 0===arguments.length?(this._events={},this):(e&&this._events&&this._events[e]&&(this._events[e]=null),this)},u.prototype.listeners=function(e){return this._events[e]||(this._events[e]=[]),a(this._events[e])||(this._events[e]=[this._events[e]]),this._events[e]},u.prototype.emit=function(e){var e=arguments[0],t=this._events[e];if(!t)return!1;if("function"==typeof t){switch(arguments.length){case 1:t.call(this);break;case 2:t.call(this,arguments[1]);break;case 3:t.call(this,arguments[1],arguments[2]);break;default:for(var n=arguments.length,r=new Array(n-1),i=1;n>i;i++)r[i-1]=arguments[i];t.apply(this,r)}return!0}if(a(t)){for(var n=arguments.length,r=new Array(n-1),i=1;n>i;i++)r[i-1]=arguments[i];for(var s=t.slice(),i=0,n=s.length;n>i;i++)s[i].apply(this,r);return!0}return!1},f.prototype.send=function(e){var t=h.pack(e);return t.size<this._mtu?(this._handleSend(["no",t]),void 0):(this._outgoing[this._count]={ack:0,chunks:this._chunk(t)},h.debug&&(this._outgoing[this._count].timer=new Date),this._sendWindowedChunks(this._count),this._count+=1,void 0)},f.prototype._setupInterval=function(){var e=this;this._timeout=setInterval(function(){var t=e._queue.shift();if(t._multiple)for(var n=0,r=t.length;r>n;n+=1)e._intervalSend(t[n]);else e._intervalSend(t)},this._interval)},f.prototype._intervalSend=function(e){var t=this;e=h.pack(e),h.blobToBinaryString(e,function(e){t._dc.send(e)}),0===t._queue.length&&(clearTimeout(t._timeout),t._timeout=null)},f.prototype._processAcks=function(){for(var e in this._outgoing)this._outgoing.hasOwnProperty(e)&&this._sendWindowedChunks(e)},f.prototype._handleSend=function(e){for(var t=!0,n=0,r=this._queue.length;r>n;n+=1){var i=this._queue[n];i===e?t=!1:i._multiple&&-1!==i.indexOf(e)&&(t=!1)}t&&(this._queue.push(e),this._timeout||this._setupInterval())},f.prototype._setupDC=function(){var e=this;this._dc.onmessage=function(t){var n=t.data,r=n.constructor;if(r===String){var i=h.binaryStringToArrayBuffer(n);n=h.unpack(i),e._handleMessage(n)}}},f.prototype._handleMessage=function(e){var i,t=e[1],n=this._incoming[t],r=this._outgoing[t];switch(e[0]){case"no":var s=t;!s||this.onmessage(h.unpack(s));break;case"end":if(i=n,this._received[t]=e[2],!i)break;this._ack(t);break;case"ack":if(i=r){var o=e[2];i.ack=Math.max(o,i.ack),i.ack>=i.chunks.length?(h.log("Time: ",new Date-i.timer),delete this._outgoing[t]):this._processAcks()}break;case"chunk":if(i=n,!i){var u=this._received[t];if(u===!0)break;i={ack:["ack",t,0],chunks:[]},this._incoming[t]=i}var a=e[2],f=e[3];i.chunks[a]=new Uint8Array(f),a===i.ack[2]&&this._calculateNextAck(t),this._ack(t);break;default:this._handleSend(e)}},f.prototype._chunk=function(e){for(var t=[],n=e.size,r=0;n>r;){var i=Math.min(n,r+this._mtu),s=e.slice(r,i),o={payload:s};t.push(o),r=i}return h.log("Created",t.length,"chunks."),t},f.prototype._ack=function(e){var t=this._incoming[e].ack;this._received[e]===t[2]&&(this._complete(e),this._received[e]=!0),this._handleSend(t)},f.prototype._calculateNextAck=function(e){for(var t=this._incoming[e],n=t.chunks,r=0,i=n.length;i>r;r+=1)if(void 0===n[r])return t.ack[2]=r,void 0;
t.ack[2]=n.length},f.prototype._sendWindowedChunks=function(e){h.log("sendWindowedChunks for: ",e);for(var t=this._outgoing[e],n=t.chunks,r=[],i=Math.min(t.ack+this._window,n.length),s=t.ack;i>s;s+=1)n[s].sent&&s!==t.ack||(n[s].sent=!0,r.push(["chunk",e,s,n[s].payload]));t.ack+this._window>=n.length&&r.push(["end",e,n.length]),r._multiple=!0,this._handleSend(r)},f.prototype._complete=function(e){h.log("Completed called for",e);var t=this,n=this._incoming[e].chunks,r=new Blob(n);h.blobToArrayBuffer(r,function(e){t.onmessage(h.unpack(e))}),delete this._incoming[e]},f.higherBandwidthSDP=function(e){var t=navigator.appVersion.match(/Chrome\/(.*?) /);if(t&&(t=parseInt(t[1].split(".").shift()),31>t)){var n=e.split("b=AS:30"),r="b=AS:102400";if(n.length>1)return n[0]+r+n[1]}return e},f.prototype.onmessage=function(){},e.Reliable=f,e.RTCSessionDescription=window.RTCSessionDescription||window.mozRTCSessionDescription,e.RTCPeerConnection=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,e.RTCIceCandidate=window.RTCIceCandidate||window.mozRTCIceCandidate;var l={iceServers:[{url:"stun:stun.l.google.com:19302"}]},c=1,h={noop:function(){},CLOUD_HOST:"0.peerjs.com",CLOUD_PORT:9e3,chunkedBrowsers:{Chrome:1},chunkedMTU:16300,logLevel:0,setLogLevel:function(e){var t=parseInt(e,10);h.logLevel=isNaN(parseInt(e,10))?e?3:0:t,h.log=h.warn=h.error=h.noop,h.logLevel>0&&(h.error=h._printWith("ERROR")),h.logLevel>1&&(h.warn=h._printWith("WARNING")),h.logLevel>2&&(h.log=h._print)},setLogFunction:function(e){e.constructor!==Function?h.warn("The log function you passed in is not a function. Defaulting to regular logs."):h._print=e},_printWith:function(e){return function(){var t=Array.prototype.slice.call(arguments);t.unshift(e),h._print.apply(h,t)}},_print:function(){var e=!1,t=Array.prototype.slice.call(arguments);t.unshift("PeerJS: ");for(var n=0,r=t.length;r>n;n++)t[n]instanceof Error&&(t[n]="("+t[n].name+") "+t[n].message,e=!0);e?console.error.apply(console,t):console.log.apply(console,t)},defaultConfig:l,browser:function(){return window.mozRTCPeerConnection?"Firefox":window.webkitRTCPeerConnection?"Chrome":window.RTCPeerConnection?"Supported":"Unsupported"}(),supports:function(){if("undefined"==typeof RTCPeerConnection)return{};var s,o,e=!0,t=!0,n=!1,r=!1,i=!!window.webkitRTCPeerConnection;try{s=new RTCPeerConnection(l,{optional:[{RtpDataChannels:!0}]})}catch(u){e=!1,t=!1}if(e)try{o=s.createDataChannel("_PEERJSTEST")}catch(u){e=!1}if(e){try{o.binaryType="blob",n=!0}catch(u){}var a=new RTCPeerConnection(l,{});try{var f=a.createDataChannel("_PEERJSRELIABLETEST",{});r=f.reliable}catch(u){}a.close()}if(t&&(t=!!s.addStream),!i&&e){var c=new RTCPeerConnection(l,{optional:[{RtpDataChannels:!0}]});c.onnegotiationneeded=function(){i=!0,h&&h.supports&&(h.supports.onnegotiationneeded=!0)};{c.createDataChannel("_PEERJSNEGOTIATIONTEST")}setTimeout(function(){c.close()},1e3)}return s&&s.close(),{audioVideo:t,data:e,binaryBlob:n,binary:r,reliable:r,sctp:r,onnegotiationneeded:i}}(),validateId:function(e){return!e||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(e)},validateKey:function(e){return!e||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(e)},debug:!1,inherits:function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})},extend:function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},pack:BinaryPack.pack,unpack:BinaryPack.unpack,log:function(){if(h.debug){var e=!1,t=Array.prototype.slice.call(arguments);t.unshift("PeerJS: ");for(var n=0,r=t.length;r>n;n++)t[n]instanceof Error&&(t[n]="("+t[n].name+") "+t[n].message,e=!0);e?console.error.apply(console,t):console.log.apply(console,t)}},setZeroTimeout:function(e){function r(r){t.push(r),e.postMessage(n,"*")}function i(r){r.source==e&&r.data==n&&(r.stopPropagation&&r.stopPropagation(),t.length&&t.shift()())}var t=[],n="zero-timeout-message";return e.addEventListener?e.addEventListener("message",i,!0):e.attachEvent&&e.attachEvent("onmessage",i),r}(this),chunk:function(e){for(var t=[],n=e.size,r=index=0,i=Math.ceil(n/h.chunkedMTU);n>r;){var s=Math.min(n,r+h.chunkedMTU),o=e.slice(r,s),u={__peerData:c,n:index,data:o,total:i};t.push(u),r=s,index+=1}return c+=1,t},blobToArrayBuffer:function(e,t){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.readAsArrayBuffer(e)},blobToBinaryString:function(e,t){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.readAsBinaryString(e)},binaryStringToArrayBuffer:function(e){for(var t=new Uint8Array(e.length),n=0;n<e.length;n++)t[n]=255&e.charCodeAt(n);return t.buffer},randomToken:function(){return Math.random().toString(36).substr(2)},isSecure:function(){return"https:"===location.protocol}};e.util=h,h.inherits(p,u),p.prototype._initializeServerConnection=function(){var e=this;this.socket=new g(this.options.secure,this.options.host,this.options.port,this.options.path,this.options.key),this.socket.on("message",function(t){e._handleMessage(t)}),this.socket.on("error",function(t){e._abort("socket-error",t)}),this.socket.on("disconnected",function(){e.disconnected||(e.emitError("network","Lost connection to server."),e.disconnect())}),this.socket.on("close",function(){e.disconnected||e._abort("socket-closed","Underlying socket is already closed.")})},p.prototype._retrieveId=function(){var t=this,n=new XMLHttpRequest,r=this.options.secure?"https://":"http://",i=r+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/id",s="?ts="+(new Date).getTime()+Math.random();i+=s,n.open("get",i,!0),n.onerror=function(e){h.error("Error retrieving ID",e);var n="";"/"===t.options.path&&t.options.host!==h.CLOUD_HOST&&(n=" If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer."),t._abort("server-error","Could not get an ID from the server."+n)},n.onreadystatechange=function(){return 4===n.readyState?200!==n.status?(n.onerror(),void 0):(t._initialize(n.responseText),void 0):void 0},n.send(null)},p.prototype._initialize=function(e){this.id=e,this.socket.start(this.id,this.options.token)},p.prototype._handleMessage=function(e){var t=e.type,n=e.payload,r=e.src;switch(t){case"OPEN":this.emit("open",this.id),this.open=!0;break;case"ERROR":this._abort("server-error",n.msg);break;case"ID-TAKEN":this._abort("unavailable-id","ID `"+this.id+"` is taken");break;case"INVALID-KEY":this._abort("invalid-key",'API KEY "'+this.options.key+'" is invalid');break;case"LEAVE":h.log("Received leave message from",r),this._cleanupPeer(r);break;case"EXPIRE":this.emitError("peer-unavailable","Could not connect to peer "+r);break;case"OFFER":var i=n.connectionId,s=this.getConnection(r,i);if(s)h.warn("Offer received for existing Connection ID:",i);else{if("media"===n.type){var s=new v(r,this,{connectionId:i,_payload:n,metadata:n.metadata});this._addConnection(r,s),this.emit("call",s)}else{if("data"!==n.type)return h.warn("Received malformed connection type:",n.type),void 0;s=new d(r,this,{connectionId:i,_payload:n,metadata:n.metadata,label:n.label,serialization:n.serialization,reliable:n.reliable}),this._addConnection(r,s),this.emit("connection",s)}for(var o=this._getMessages(i),u=0,a=o.length;a>u;u+=1)s.handleMessage(o[u])}break;default:if(!n)return h.warn("You received a malformed message from "+r+" of type "+t),void 0;var f=n.connectionId,s=this.getConnection(r,f);s&&s.pc?s.handleMessage(e):f?this._storeMessage(f,e):h.warn("You received an unrecognized message:",e)}},p.prototype._storeMessage=function(e,t){this._lostMessages[e]||(this._lostMessages[e]=[]),this._lostMessages[e].push(t)},p.prototype._getMessages=function(e){var t=this._lostMessages[e];return t?(delete this._lostMessages[e],t):[]},p.prototype.connect=function(e,t){if(this.disconnected)return h.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available."),this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server."),void 0;var n=new d(e,this,t);return this._addConnection(e,n),n},p.prototype.call=function(e,t,n){if(this.disconnected)return h.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect."),this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server."),void 0;if(!t)return h.error("To call a peer, you must provide a stream from your browser's `getUserMedia`."),void 0;n=n||{},n._stream=t;var r=new v(e,this,n);return this._addConnection(e,r),r},p.prototype._addConnection=function(e,t){this.connections[e]||(this.connections[e]=[]),this.connections[e].push(t)},p.prototype.getConnection=function(e,t){var n=this.connections[e];if(!n)return null;for(var r=0,i=n.length;i>r;r++)if(n[r].id===t)return n[r];return null},p.prototype._delayedAbort=function(e,t){var n=this;h.setZeroTimeout(function(){n._abort(e,t)})},p.prototype._abort=function(e,t){h.error("Aborting!"),this._lastServerId?this.disconnect():this.destroy(),this.emitError(e,t)},p.prototype.emitError=function(e,t){h.error("Error:",t),"string"==typeof t&&(t=new Error(t)),t.type=e,this.emit("error",t)},p.prototype.destroy=function(){this.destroyed||(this._cleanup(),this.disconnect(),this.destroyed=!0)},p.prototype._cleanup=function(){if(this.connections)for(var e=Object.keys(this.connections),t=0,n=e.length;n>t;t++)this._cleanupPeer(e[t]);this.emit("close")},p.prototype._cleanupPeer=function(e){for(var t=this.connections[e],n=0,r=t.length;r>n;n+=1)t[n].close()},p.prototype.disconnect=function(){var e=this;h.setZeroTimeout(function(){e.disconnected||(e.disconnected=!0,e.open=!1,e.socket&&e.socket.close(),e.emit("disconnected",e.id),e._lastServerId=e.id,e.id=null)})},p.prototype.reconnect=function(){if(this.disconnected&&!this.destroyed)h.log("Attempting reconnection to server with ID "+this._lastServerId),this.disconnected=!1,this._initializeServerConnection(),this._initialize(this._lastServerId);else{if(this.destroyed)throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");if(this.disconnected||this.open)throw new Error("Peer "+this.id+" cannot reconnect because it is not disconnected from the server!");h.error("In a hurry? We're still trying to make the initial connection!")}},p.prototype.listAllPeers=function(e){e=e||function(){};var t=this,n=new XMLHttpRequest,r=this.options.secure?"https://":"http://",i=r+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/peers",s="?ts="+(new Date).getTime()+Math.random();i+=s,n.open("get",i,!0),n.onerror=function(){t._abort("server-error","Could not get peers from the server."),e([])},n.onreadystatechange=function(){if(4===n.readyState){if(401===n.status){var r="";throw r=t.options.host!==h.CLOUD_HOST?"It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key.":"You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.",new Error("It doesn't look like you have permission to list peers IDs. "+r)}200!==n.status?e([]):e(JSON.parse(n.responseText))}},n.send(null)},e.Peer=p,h.inherits(d,u),d._idPrefix="dc_",d.prototype.initialize=function(e){this._dc=this.dataChannel=e,this._configureDataChannel()},d.prototype._configureDataChannel=function(){var e=this;h.supports.sctp&&(this._dc.binaryType="arraybuffer"),this._dc.onopen=function(){h.log("Data channel connection success"),e.open=!0,e.emit("open")},!h.supports.sctp&&this.reliable&&(this._reliable=new f(this._dc,h.debug)),this._reliable?this._reliable.onmessage=function(t){e.emit("data",t)}:this._dc.onmessage=function(t){e._handleDataMessage(t)},this._dc.onclose=function(){h.log("DataChannel closed for:",e.peer),e.close()}},d.prototype._handleDataMessage=function(e){var t=this,n=e.data,r=n.constructor;if("binary"===this.serialization||"binary-utf8"===this.serialization){if(r===Blob)return h.blobToArrayBuffer(n,function(e){n=h.unpack(e),t.emit("data",n)}),void 0;if(r===ArrayBuffer)n=h.unpack(n);else if(r===String){var i=h.binaryStringToArrayBuffer(n);n=h.unpack(i)}}else"json"===this.serialization&&(n=JSON.parse(n));if(n.__peerData){var s=n.__peerData,o=this._chunkedData[s]||{data:[],count:0,total:n.total};return o.data[n.n]=n.data,o.count+=1,o.total===o.count&&(delete this._chunkedData[s],n=new Blob(o.data),this._handleDataMessage({data:n})),this._chunkedData[s]=o,void 0}this.emit("data",n)},d.prototype.close=function(){this.open&&(this.open=!1,m.cleanup(this),this.emit("close"))},d.prototype.send=function(e,t){if(!this.open)return this.emit("error",new Error("Connection is not open. You should listen for the `open` event before sending messages.")),void 0;if(this._reliable)return this._reliable.send(e),void 0;var n=this;if("json"===this.serialization)this._bufferedSend(JSON.stringify(e));else if("binary"===this.serialization||"binary-utf8"===this.serialization){var r=h.pack(e),i=h.chunkedBrowsers[this._peerBrowser]||h.chunkedBrowsers[h.browser];if(i&&!t&&r.size>h.chunkedMTU)return this._sendChunks(r),void 0;h.supports.sctp?h.supports.binaryBlob?this._bufferedSend(r):h.blobToArrayBuffer(r,function(e){n._bufferedSend(e)}):h.blobToBinaryString(r,function(e){n._bufferedSend(e)})}else this._bufferedSend(e)},d.prototype._bufferedSend=function(e){(this._buffering||!this._trySend(e))&&(this._buffer.push(e),this.bufferSize=this._buffer.length)},d.prototype._trySend=function(e){try{this._dc.send(e)}catch(t){this._buffering=!0;var n=this;return setTimeout(function(){n._buffering=!1,n._tryBuffer()},100),!1}return!0},d.prototype._tryBuffer=function(){if(0!==this._buffer.length){var e=this._buffer[0];this._trySend(e)&&(this._buffer.shift(),this.bufferSize=this._buffer.length,this._tryBuffer())}},d.prototype._sendChunks=function(e){for(var t=h.chunk(e),n=0,r=t.length;r>n;n+=1){var e=t[n];this.send(e,!0)}},d.prototype.handleMessage=function(e){var t=e.payload;switch(e.type){case"ANSWER":this._peerBrowser=t.browser,m.handleSDP(e.type,this,t.sdp);break;case"CANDIDATE":m.handleCandidate(this,t.candidate);break;default:h.warn("Unrecognized message type:",e.type,"from peer:",this.peer)}},h.inherits(v,u),v._idPrefix="mc_",v.prototype.addStream=function(e){h.log("Receiving stream",e),this.remoteStream=e,this.emit("stream",e)},v.prototype.handleMessage=function(e){var t=e.payload;switch(e.type){case"ANSWER":m.handleSDP(e.type,this,t.sdp),this.open=!0;break;case"CANDIDATE":m.handleCandidate(this,t.candidate);break;default:h.warn("Unrecognized message type:",e.type,"from peer:",this.peer)}},v.prototype.answer=function(e){if(this.localStream)return h.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?"),void 0;this.options._payload._stream=e,this.localStream=e,m.startConnection(this,this.options._payload);for(var t=this.provider._getMessages(this.id),n=0,r=t.length;r>n;n+=1)this.handleMessage(t[n]);this.open=!0},v.prototype.close=function(){this.open&&(this.open=!1,m.cleanup(this),this.emit("close"))};var m={pcs:{data:{},media:{}},queue:[]};m._idPrefix="pc_",m.startConnection=function(e,t){var n=m._getPeerConnection(e,t);if("media"===e.type&&t._stream&&n.addStream(t._stream),e.pc=e.peerConnection=n,t.originator){if("data"===e.type){var r={};h.supports.sctp||(r={reliable:t.reliable});var i=n.createDataChannel(e.label,r);e.initialize(i)}h.supports.onnegotiationneeded||m._makeOffer(e)}else m.handleSDP("OFFER",e,t.sdp)},m._getPeerConnection=function(e,t){m.pcs[e.type]||h.error(e.type+" is not a valid connection type. Maybe you overrode the `type` property somewhere."),m.pcs[e.type][e.peer]||(m.pcs[e.type][e.peer]={});{var r;m.pcs[e.type][e.peer]}return t.pc&&(r=m.pcs[e.type][e.peer][t.pc]),r&&"stable"===r.signalingState||(r=m._startPeerConnection(e)),r},m._startPeerConnection=function(e){h.log("Creating RTCPeerConnection.");var t=m._idPrefix+h.randomToken(),n={};"data"!==e.type||h.supports.sctp?"media"===e.type&&(n={optional:[{DtlsSrtpKeyAgreement:!0}]}):n={optional:[{RtpDataChannels:!0}]};var r=new RTCPeerConnection(e.provider.options.config,n);return m.pcs[e.type][e.peer][t]=r,m._setupListeners(e,r,t),r},m._setupListeners=function(e,t){var r=e.peer,i=e.id,s=e.provider;h.log("Listening for ICE candidates."),t.onicecandidate=function(t){t.candidate&&(h.log("Received ICE candidates for:",e.peer),s.socket.send({type:"CANDIDATE",payload:{candidate:t.candidate,type:e.type,connectionId:e.id},dst:r}))},t.oniceconnectionstatechange=function(){switch(t.iceConnectionState){case"disconnected":case"failed":h.log("iceConnectionState is disconnected, closing connections to "+r),e.close();break;case"completed":t.onicecandidate=h.noop}},t.onicechange=t.oniceconnectionstatechange,h.log("Listening for `negotiationneeded`"),t.onnegotiationneeded=function(){h.log("`negotiationneeded` triggered"),"stable"==t.signalingState?m._makeOffer(e):h.log("onnegotiationneeded triggered when not stable. Is another connection being established?")},h.log("Listening for data channel"),t.ondatachannel=function(e){h.log("Received data channel");var t=e.channel,n=s.getConnection(r,i);n.initialize(t)},h.log("Listening for remote stream"),t.onaddstream=function(e){h.log("Received remote stream");var t=e.stream;s.getConnection(r,i).addStream(t)}},m.cleanup=function(e){h.log("Cleaning up PeerConnection to "+e.peer);var t=e.pc;!!t&&("closed"!==t.readyState||"closed"!==t.signalingState)&&(t.close(),e.pc=null)},m._makeOffer=function(e){var t=e.pc;t.createOffer(function(n){h.log("Created offer."),!h.supports.sctp&&"data"===e.type&&e.reliable&&(n.sdp=f.higherBandwidthSDP(n.sdp)),t.setLocalDescription(n,function(){h.log("Set localDescription: offer","for:",e.peer),e.provider.socket.send({type:"OFFER",payload:{sdp:n,type:e.type,label:e.label,connectionId:e.id,reliable:e.reliable,serialization:e.serialization,metadata:e.metadata,browser:h.browser},dst:e.peer})},function(t){e.provider.emitError("webrtc",t),h.log("Failed to setLocalDescription, ",t)})},function(t){e.provider.emitError("webrtc",t),h.log("Failed to createOffer, ",t)},e.options.constraints)},m._makeAnswer=function(e){var t=e.pc;t.createAnswer(function(n){h.log("Created answer."),!h.supports.sctp&&"data"===e.type&&e.reliable&&(n.sdp=f.higherBandwidthSDP(n.sdp)),t.setLocalDescription(n,function(){h.log("Set localDescription: answer","for:",e.peer),e.provider.socket.send({type:"ANSWER",payload:{sdp:n,type:e.type,connectionId:e.id,browser:h.browser},dst:e.peer})},function(t){e.provider.emitError("webrtc",t),h.log("Failed to setLocalDescription, ",t)})},function(t){e.provider.emitError("webrtc",t),h.log("Failed to create answer, ",t)})},m.handleSDP=function(e,t,n){n=new RTCSessionDescription(n);var r=t.pc;h.log("Setting remote description",n),r.setRemoteDescription(n,function(){h.log("Set remoteDescription:",e,"for:",t.peer),"OFFER"===e&&m._makeAnswer(t)},function(e){t.provider.emitError("webrtc",e),h.log("Failed to setRemoteDescription, ",e)})},m.handleCandidate=function(e,t){var n=t.candidate,r=t.sdpMLineIndex;e.pc.addIceCandidate(new RTCIceCandidate({sdpMLineIndex:r,candidate:n})),h.log("Added ICE candidate for:",e.peer)},h.inherits(g,u),g.prototype.start=function(e,t){this.id=e,this._httpUrl+="/"+e+"/"+t,this._wsUrl+="&id="+e+"&token="+t,this._startXhrStream(),this._startWebSocket()},g.prototype._startWebSocket=function(){var t=this;this._socket||(this._socket=new WebSocket(this._wsUrl),this._socket.onmessage=function(e){try{var n=JSON.parse(e.data);t.emit("message",n)}catch(r){return h.log("Invalid server message",e.data),void 0}},this._socket.onclose=function(){h.log("Socket closed."),t.disconnected=!0,t.emit("disconnected")},this._socket.onopen=function(){t._timeout&&(clearTimeout(t._timeout),setTimeout(function(){t._http.abort(),t._http=null},5e3)),t._sendQueuedMessages(),h.log("Socket open")})},g.prototype._startXhrStream=function(e){try{var t=this;this._http=new XMLHttpRequest,this._http._index=1,this._http._streamIndex=e||0,this._http.open("post",this._httpUrl+"/id?i="+this._http._streamIndex,!0),this._http.onerror=function(){clearTimeout(t._timeout),t.emit("disconnected")},this._http.onreadystatechange=function(){2==this.readyState&&this.old?(this.old.abort(),delete this.old):this.readyState>2&&200===this.status&&this.responseText&&t._handleStream(this)},this._http.send(null),this._setHTTPTimeout()}catch(n){h.log("XMLHttpRequest not available; defaulting to WebSockets")}},g.prototype._handleStream=function(e){var t=e.responseText.split("\n");if(e._buffer)for(;e._buffer.length>0;){var n=e._buffer.shift(),r=t[n];try{r=JSON.parse(r)}catch(i){e._buffer.shift(n);break}this.emit("message",r)}var s=t[e._index];if(s)if(e._index+=1,e._index===t.length)e._buffer||(e._buffer=[]),e._buffer.push(e._index-1);else{try{s=JSON.parse(s)}catch(i){return h.log("Invalid server message",s),void 0}this.emit("message",s)}},g.prototype._setHTTPTimeout=function(){var e=this;this._timeout=setTimeout(function(){var t=e._http;e._wsOpen()?t.abort():(e._startXhrStream(t._streamIndex+1),e._http.old=t)},25e3)},g.prototype._wsOpen=function(){return this._socket&&1==this._socket.readyState},g.prototype._sendQueuedMessages=function(){for(var e=0,t=this._queue.length;t>e;e+=1)this.send(this._queue[e])},g.prototype.send=function(e){if(!this.disconnected){if(!this.id)return this._queue.push(e),void 0;if(!e.type)return this.emit("error","Invalid message"),void 0;var t=JSON.stringify(e);if(this._wsOpen())this._socket.send(t);else{var n=new XMLHttpRequest,r=this._httpUrl+"/"+e.type.toLowerCase();n.open("post",r,!0),n.setRequestHeader("Content-Type","application/json"),n.send(t)}}},g.prototype.close=function(){!this.disconnected&&this._wsOpen()&&(this._socket.close(),this.disconnected=!0)}}(this),{}}.call(Reflect.global)},{}]},{},[4,2]);
//# sourceMappingURL=data:application/json;base64,